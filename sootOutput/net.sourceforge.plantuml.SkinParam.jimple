public class net.sourceforge.plantuml.SkinParam extends java.lang.Object implements net.sourceforge.plantuml.ISkinParam
{
    public static final java.lang.String DEFAULT_PRESERVE_ASPECT_RATIO;
    private java.lang.String skin;
    private net.sourceforge.plantuml.style.StyleBuilder styleBuilder;
    private final net.sourceforge.plantuml.api.ThemeStyle themeStyle;
    private static final java.lang.String stereoPatternString;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 stereoPattern;
    private final java.util.Map params;
    private final java.util.Map paramsPendingForStyleMigration;
    private final java.util.Map svgCharSizes;
    private net.sourceforge.plantuml.cucadiagram.Rankdir rankdir;
    private final net.sourceforge.plantuml.UmlDiagramType type;
    private boolean useVizJs;
    private final java.util.Map cacheCleanForKey;
    private final java.util.Map sprites;
    private final net.sourceforge.plantuml.ugraphic.color.HColorSet htmlColorSet;
    static final boolean $assertionsDisabled;

    private void <init>(net.sourceforge.plantuml.UmlDiagramType, net.sourceforge.plantuml.api.ThemeStyle)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.util.HashMap $r1, $r3, $r5, $r6;
        java.util.LinkedHashMap $r2;
        net.sourceforge.plantuml.cucadiagram.Rankdir $r4;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.api.ThemeStyle r8;
        net.sourceforge.plantuml.UmlDiagramType r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r9 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        r8 := @parameter1: net.sourceforge.plantuml.api.ThemeStyle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.SkinParam: java.lang.String skin> = "plantuml.skin";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.SkinParam: java.util.Map params> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.SkinParam: java.util.Map paramsPendingForStyleMigration> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.SkinParam: java.util.Map svgCharSizes> = $r3;

        $r4 = <net.sourceforge.plantuml.cucadiagram.Rankdir: net.sourceforge.plantuml.cucadiagram.Rankdir TOP_TO_BOTTOM>;

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.cucadiagram.Rankdir rankdir> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.SkinParam: java.util.Map cacheCleanForKey> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.SkinParam: java.util.Map sprites> = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet htmlColorSet> = $r7;

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle> = r8;

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.UmlDiagramType type> = r9;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(0);

        $r10 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType MINDMAP>;

        if r9 != $r10 goto label01;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label01:
        $r11 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType WBS>;

        if r9 != $r11 goto label02;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label02:
        $r12 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType GANTT>;

        if r9 != $r12 goto label03;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label03:
        $r13 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType JSON>;

        if r9 != $r13 goto label04;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label04:
        $r14 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType GIT>;

        if r9 != $r14 goto label05;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label05:
        $r15 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType BOARD>;

        if r9 != $r15 goto label06;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label06:
        $r16 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType YAML>;

        if r9 != $r16 goto label07;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label07:
        $r17 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType HCL>;

        if r9 != $r17 goto label08;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label08:
        $r18 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType NWDIAG>;

        if r9 != $r18 goto label09;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label09:
        $r19 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType SEQUENCE>;

        if r9 != $r19 goto label10;

     label10:
        return;
    }

    public net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.style.StyleBuilder $r1, $r2, $r5;
        boolean $z0;
        java.io.IOException $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        if $r1 != null goto label4;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label4;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilderInternal()>();

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

     label4:
        $r5 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void muteStyle(net.sourceforge.plantuml.style.Style)
    {
        boolean $z0;
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.style.StyleBuilder $r1, $r3;
        net.sourceforge.plantuml.style.Style r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r2 := @parameter0: net.sourceforge.plantuml.style.Style;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.style.StyleBuilder muteStyle(net.sourceforge.plantuml.style.Style)>(r2);

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = $r3;

     label1:
        return;
    }

    public java.lang.String getDefaultSkin()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: java.lang.String skin>;

        return $r1;
    }

    public void setDefaultSkin(java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.SkinParam: java.lang.String skin> = r1;

        return;
    }

    public net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilderInternal() throws java.io.IOException
    {
        net.sourceforge.plantuml.style.StyleLoader $r0;
        net.sourceforge.plantuml.SkinParam r1;
        java.lang.String $r3;
        net.sourceforge.plantuml.style.StyleBuilder r4;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        $r0 = new net.sourceforge.plantuml.style.StyleLoader;

        specialinvoke $r0.<net.sourceforge.plantuml.style.StyleLoader: void <init>(net.sourceforge.plantuml.SkinParam)>(r1);

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getDefaultSkin()>();

        r4 = virtualinvoke $r0.<net.sourceforge.plantuml.style.StyleLoader: net.sourceforge.plantuml.style.StyleBuilder loadSkin(java.lang.String)>($r3);

        if r4 != null goto label1;

        r4 = virtualinvoke $r0.<net.sourceforge.plantuml.style.StyleLoader: net.sourceforge.plantuml.style.StyleBuilder loadSkin(java.lang.String)>("plantuml.skin");

     label1:
        return r4;
    }

    public static int zeroMargin(int)
    {
        int i0;

        i0 := @parameter0: int;

        return i0;
    }

    public void copyAllFrom(net.sourceforge.plantuml.ISkinSimple)
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.ISkinSimple r1;
        java.util.Map $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinSimple;

        $r2 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map params>;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinSimple: java.util.Map values()>();

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r3);

        return;
    }

    public java.util.Map values()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.util.Map $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map params>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public void setParam(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, $r3, r4, $r5, $r11, $r19, r22;
        java.util.List $r2, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Class $r6;
        java.util.Collection $r7;
        java.lang.Object $r8, $r9, $r18;
        java.util.Map $r10, $r13;
        net.sourceforge.plantuml.style.FromSkinparamToStyle $r15;
        net.sourceforge.plantuml.style.StyleBuilder $r16, r27;
        java.io.IOException $r20;
        java.util.Iterator r21, r24, r29;
        net.sourceforge.plantuml.style.Style r25, r30;
        java.io.InputStream r26;
        net.sourceforge.plantuml.command.BlocLines r28;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.util.List cleanForKey(java.lang.String)>(r1);

        r21 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r9 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r9;

        $r10 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map params>;

        $r11 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r4);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, $r11);

        $z5 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("usebetastyle");

        if $z5 == 0 goto label02;

        $r19 = "true";

        $z7 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z7 == 0 goto label02;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(1);

     label02:
        $z8 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z8 == 0 goto label05;

        virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: void applyPendingStyleMigration()>();

        $r15 = new net.sourceforge.plantuml.style.FromSkinparamToStyle;

        specialinvoke $r15.<net.sourceforge.plantuml.style.FromSkinparamToStyle: void <init>(java.lang.String)>(r22);

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        virtualinvoke $r15.<net.sourceforge.plantuml.style.FromSkinparamToStyle: void convertNow(java.lang.String,net.sourceforge.plantuml.style.AutomaticCounter)>(r4, $r16);

        $r17 = virtualinvoke $r15.<net.sourceforge.plantuml.style.FromSkinparamToStyle: java.util.List getStyles()>();

        r24 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r18 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (net.sourceforge.plantuml.style.Style) $r18;

        virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: void muteStyle(net.sourceforge.plantuml.style.Style)>(r25);

        goto label03;

     label04:
        goto label06;

     label05:
        $r13 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map paramsPendingForStyleMigration>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label06:
        goto label01;

     label07:
        $r3 = "style";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label12;

        $r5 = "strictuml";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z2 == 0 goto label12;

        $z3 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z3 == 0 goto label12;

        $r6 = class "Lnet/sourceforge/plantuml/style/StyleLoader;";

        r26 = virtualinvoke $r6.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/skin/strictuml.skin");

        r27 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

     label08:
        r28 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines load(java.io.InputStream,net.sourceforge.plantuml.LineLocation)>(r26, null);

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleLoader: java.util.Collection getDeclaredStyles(net.sourceforge.plantuml.command.BlocLines,net.sourceforge.plantuml.style.AutomaticCounter)>(r28, r27);

        r29 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r8 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (net.sourceforge.plantuml.style.Style) $r8;

        virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: void muteStyle(net.sourceforge.plantuml.style.Style)>(r30);

        goto label09;

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.io.IOException: void printStackTrace()>();

     label12:
        return;

        catch java.io.IOException from label08 to label10 with label11;
    }

    public void applyPendingStyleMigration()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.util.Map $r1, $r4;
        java.util.Set $r2;
        java.util.Iterator r3, r15;
        boolean $z0, $z1;
        java.lang.Object $r5, $r8, $r11, $r16;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.style.FromSkinparamToStyle $r7;
        java.lang.String $r9, $r12;
        net.sourceforge.plantuml.style.StyleBuilder $r13;
        java.util.List $r14;
        net.sourceforge.plantuml.style.Style r17;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map paramsPendingForStyleMigration>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = new net.sourceforge.plantuml.style.FromSkinparamToStyle;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        specialinvoke $r7.<net.sourceforge.plantuml.style.FromSkinparamToStyle: void <init>(java.lang.String)>($r9);

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        virtualinvoke $r7.<net.sourceforge.plantuml.style.FromSkinparamToStyle: void convertNow(java.lang.String,net.sourceforge.plantuml.style.AutomaticCounter)>($r12, $r13);

        $r14 = virtualinvoke $r7.<net.sourceforge.plantuml.style.FromSkinparamToStyle: java.util.List getStyles()>();

        r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (net.sourceforge.plantuml.style.Style) $r16;

        virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: void muteStyle(net.sourceforge.plantuml.style.Style)>(r17);

        goto label2;

     label3:
        goto label1;

     label4:
        $r4 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map paramsPendingForStyleMigration>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        return;
    }

    public static net.sourceforge.plantuml.SkinParam create(net.sourceforge.plantuml.UmlDiagramType, net.sourceforge.plantuml.api.ThemeStyle)
    {
        net.sourceforge.plantuml.SkinParam $r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.api.ThemeStyle r2;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        r2 := @parameter1: net.sourceforge.plantuml.api.ThemeStyle;

        $r0 = new net.sourceforge.plantuml.SkinParam;

        specialinvoke $r0.<net.sourceforge.plantuml.SkinParam: void <init>(net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.api.ThemeStyle)>(r1, r2);

        return $r0;
    }

    public static net.sourceforge.plantuml.SkinParam noShadowing(net.sourceforge.plantuml.UmlDiagramType, net.sourceforge.plantuml.api.ThemeStyle)
    {
        net.sourceforge.plantuml.SkinParam $r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.api.ThemeStyle r2;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        r2 := @parameter1: net.sourceforge.plantuml.api.ThemeStyle;

        $r0 = new net.sourceforge.plantuml.SkinParam;

        specialinvoke $r0.<net.sourceforge.plantuml.SkinParam: void <init>(net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.api.ThemeStyle)>(r1, r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.SkinParam: void setParam(java.lang.String,java.lang.String)>("shadowing", "false");

        return $r0;
    }

    java.util.List cleanForKey(java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        java.util.Map $r2, $r4;
        java.lang.Object $r3;
        java.util.List r6;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map cacheCleanForKey>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.util.List) $r3;

        if r6 != null goto label1;

        r6 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.util.List cleanForKeySlow(java.lang.String)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map cacheCleanForKey>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

     label1:
        return r6;
    }

    java.util.List cleanForKeySlow(java.lang.String)
    {
        java.lang.String $r0, r6, $r8, $r13, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        java.util.ArrayList $r3;
        boolean $z0;
        int $i0;
        java.util.List $r5;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12;
        net.sourceforge.plantuml.SkinParam r14;

        r14 := @this: net.sourceforge.plantuml.SkinParam;

        r15 := @parameter0: java.lang.String;

        $r0 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>(r15);

        r16 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r0);

        r17 = virtualinvoke r16.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_|\\.|\\s", "");

        r18 = staticinvoke <net.sourceforge.plantuml.SkinParam: java.lang.String replaceSmart(java.lang.String,java.lang.String,java.lang.String)>(r17, "sequenceparticipant", "participant");

        r19 = staticinvoke <net.sourceforge.plantuml.SkinParam: java.lang.String replaceSmart(java.lang.String,java.lang.String,java.lang.String)>(r18, "sequenceactor", "actor");

        r20 = virtualinvoke r19.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("activityarrow", "arrow");

        r21 = virtualinvoke r20.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("objectarrow", "arrow");

        r22 = virtualinvoke r21.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("classarrow", "arrow");

        r23 = virtualinvoke r22.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("componentarrow", "arrow");

        r24 = virtualinvoke r23.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("statearrow", "arrow");

        r25 = virtualinvoke r24.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("usecasearrow", "arrow");

        r26 = virtualinvoke r25.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("sequencearrow", "arrow");

        r27 = virtualinvoke r26.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("align$", "alignment");

        $r1 = <net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.command.regex.Pattern2 stereoPattern>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r27);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r27.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\<\\<(.*?)\\>\\>", "");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r27);

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r5;
    }

    private static java.lang.String replaceSmart(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getHyperlinkColor()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.ColorParam $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam hyperlink>;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r1, null, 0);

        if r2 != null goto label1;

        $r3 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor BLUE>;

        return $r3;

     label1:
        return r2;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.ColorParam $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r1, null, 0);

        if r2 == null goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

     label2:
        return $r3;
    }

    public java.lang.String getValue(java.lang.String)
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, r5, r8;
        java.util.List $r2;
        java.util.Iterator r3;
        java.lang.Object $r4, $r7;
        java.util.Map $r6;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: void applyPendingStyleMigration()>();

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.util.List cleanForKey(java.lang.String)>(r1);

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map params>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.lang.String) $r7;

        if r8 == null goto label3;

        return r8;

     label3:
        goto label2;

     label4:
        return null;
    }

    public java.lang.String getValue(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, r2, r3, $r4;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = r2;

     label2:
        return $r4;
    }

    private boolean valueIs(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2, $r3;
        net.sourceforge.plantuml.SkinParam r1;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>(r2);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        return $z0;
    }

    private boolean isTrue(java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>(r1, "true");

        return $z0;
    }

    static java.lang.String humanName(java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String r2, $r3;
        int $i0, i2;
        char c1, $c3;
        boolean z0;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        z0 = 1;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i2 >= $i0 goto label6;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i2);

        if c1 != 95 goto label2;

        z0 = 1;

        goto label5;

     label2:
        if z0 == 0 goto label3;

        $c3 = staticinvoke <net.sourceforge.plantuml.StringUtils: char goUpperCase(char)>(c1);

        goto label4;

     label3:
        $c3 = staticinvoke <net.sourceforge.plantuml.StringUtils: char goLowerCase(char)>(c1);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        z0 = 0;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam, net.sourceforge.plantuml.cucadiagram.Stereotype, boolean)
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.ColorParam r2, $r4, $r6, $r11, $r16;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String $r3, r19, $r21, $r26, r27, r35;
        net.sourceforge.plantuml.ugraphic.color.HColor $r5, $r9, $r10, $r15, $r30, $r33;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7, $r13, $r28, $r31;
        net.sourceforge.plantuml.api.ThemeStyle $r8, $r14, $r29, $r32;
        java.lang.AssertionError $r12;
        java.util.List $r17;
        java.lang.Object $r18;
        java.lang.StringBuilder $r20, $r22, $r23, $r24, $r25;
        java.util.Iterator r34;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r2 := @parameter0: net.sourceforge.plantuml.ColorParam;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.Stereotype;

        z0 := @parameter2: boolean;

        if r0 == null goto label3;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.util.List getMultipleLabels()>();

        r34 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r18 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r18;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r2.<net.sourceforge.plantuml.ColorParam: java.lang.String name()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color<<");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r27 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r26);

        if r27 == null goto label2;

        $r28 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r29 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r30 = virtualinvoke $r28.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r29, r27);

        if $r30 == null goto label2;

        $r31 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r32 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r33 = virtualinvoke $r31.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r32, r27);

        return $r33;

     label2:
        goto label1;

     label3:
        $r3 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getParamName(net.sourceforge.plantuml.ColorParam,boolean)>(r2, z0);

        r35 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r3);

        if r35 != null goto label4;

        return null;

     label4:
        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        if r2 == $r4 goto label5;

        $r16 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrowHead>;

        if r2 != $r16 goto label7;

     label5:
        $z1 = virtualinvoke r35.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("transparent");

        if $z1 != 0 goto label6;

        $z2 = virtualinvoke r35.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z2 == 0 goto label7;

     label6:
        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor transparent()>();

        return $r5;

     label7:
        $r6 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        if r2 != $r6 goto label8;

        $r13 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r14 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r15 = virtualinvoke $r13.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r14, r35);

        return $r15;

     label8:
        $z3 = <net.sourceforge.plantuml.SkinParam: boolean $assertionsDisabled>;

        if $z3 != 0 goto label9;

        $r11 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        if r2 != $r11 goto label9;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label9:
        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r8 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()>();

        $r10 = virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>($r8, r35, $r9);

        return $r10;
    }

    public char getCircledCharacter(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.StringBuilder $r1, $r2, $r8;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3, $r6;
        java.lang.Object $r4;
        net.sourceforge.plantuml.Guillemet $r5;
        java.lang.String $r7, $r9, r10;
        int $i0;
        char $c1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r3 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spotchar");

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r6 = (net.sourceforge.plantuml.cucadiagram.Stereotype) $r4;

        $r5 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r5);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r9);

        if r10 == null goto label1;

        $i0 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke r10.<java.lang.String: char charAt(int)>(0);

        return $c1;

     label1:
        return 0;
    }

    public net.sourceforge.plantuml.graphic.color.Colors getColors(net.sourceforge.plantuml.ColorParam, net.sourceforge.plantuml.cucadiagram.Stereotype) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.ColorParam r2;
        java.lang.String $r3, $r10, $r14, $r16, r21, r22;
        net.sourceforge.plantuml.graphic.color.Colors $r4, $r8, $r17;
        net.sourceforge.plantuml.api.ThemeStyle $r5, $r18;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r6, $r19;
        net.sourceforge.plantuml.graphic.color.ColorType $r7, $r20;
        java.lang.StringBuilder $r9, $r11, $r12, $r15;
        net.sourceforge.plantuml.Guillemet $r13;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r2 := @parameter0: net.sourceforge.plantuml.ColorParam;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.Stereotype;

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.ColorParam: java.lang.String name()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color");

        $r13 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r21 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r16);

        if r21 == null goto label1;

        $r17 = new net.sourceforge.plantuml.graphic.color.Colors;

        $r18 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r19 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r20 = virtualinvoke r2.<net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.graphic.color.ColorType getColorType()>();

        specialinvoke $r17.<net.sourceforge.plantuml.graphic.color.Colors: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.graphic.color.ColorType)>($r18, r21, $r19, $r20);

        return $r17;

     label1:
        $r3 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getParamName(net.sourceforge.plantuml.ColorParam,boolean)>(r2, 0);

        r22 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r3);

        if r22 != null goto label2;

        $r8 = staticinvoke <net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors empty()>();

        return $r8;

     label2:
        $r4 = new net.sourceforge.plantuml.graphic.color.Colors;

        $r5 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.graphic.color.ColorType getColorType()>();

        specialinvoke $r4.<net.sourceforge.plantuml.graphic.color.Colors: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.graphic.color.ColorType)>($r5, r22, $r6, $r7);

        return $r4;
    }

    private java.lang.String getParamName(net.sourceforge.plantuml.ColorParam, boolean)
    {
        net.sourceforge.plantuml.ColorParam r0;
        boolean z0, $z1, $z2;
        net.sourceforge.plantuml.SkinParam r1;
        java.lang.String r2, $r6;
        java.lang.StringBuilder $r3, $r4, $r5;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.ColorParam;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.ColorParam: java.lang.String name()>();

        if z0 == 0 goto label1;

        $z2 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("Background");

        if $z2 == 0 goto label1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("Background", "ClickableBackground");

        goto label2;

     label1:
        if z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("Border");

        if $z1 == 0 goto label2;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("Border", "ClickableBorder");

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        return;
    }

    private transient int getFontSize(net.sourceforge.plantuml.cucadiagram.Stereotype, net.sourceforge.plantuml.FontParam[])
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.FontParam[] r2;
        net.sourceforge.plantuml.FontParam $r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r8;
        net.sourceforge.plantuml.Guillemet $r6;
        java.lang.String $r7, $r9, r10, r11;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r2 := @parameter1: net.sourceforge.plantuml.FontParam[];

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fontsize");

        $r6 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>($r9, r2);

        if r10 == null goto label1;

        $z2 = virtualinvoke r10.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z2 == 0 goto label1;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r10);

        return $i2;

     label1:
        r11 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>("fontsize", r2);

        if r11 == null goto label2;

        $z1 = virtualinvoke r11.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z1 != 0 goto label3;

     label2:
        r11 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("defaultfontsize");

     label3:
        if r11 == null goto label4;

        $z0 = virtualinvoke r11.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z0 != 0 goto label5;

     label4:
        $r3 = r2[0];

        $i0 = virtualinvoke $r3.<net.sourceforge.plantuml.FontParam: int getDefaultSize(net.sourceforge.plantuml.ISkinParam)>(r1);

        return $i0;

     label5:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        return $i1;
    }

    private transient java.lang.String getFontFamily(net.sourceforge.plantuml.cucadiagram.Stereotype, net.sourceforge.plantuml.FontParam[])
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.FontParam[] r2;
        net.sourceforge.plantuml.FontParam $r3, $r4, $r5;
        java.lang.String $r6, $r7, $r8, $r12, $r14, $r15, r16, r17, r18;
        java.lang.StringBuilder $r9, $r10, $r13;
        net.sourceforge.plantuml.Guillemet $r11;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r2 := @parameter1: net.sourceforge.plantuml.FontParam[];

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fontname");

        $r11 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r16 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>($r14, r2);

        if r16 == null goto label1;

        $r15 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r16);

        return $r15;

     label1:
        r17 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>("fontname", r2);

        if r17 == null goto label2;

        $r8 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r17);

        return $r8;

     label2:
        $r4 = r2[0];

        $r3 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        if $r4 == $r3 goto label3;

        r18 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("defaultfontname");

        if r18 == null goto label3;

        $r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r18);

        return $r7;

     label3:
        $r5 = r2[0];

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.FontParam: java.lang.String getDefaultFamily()>();

        return $r6;
    }

    public transient net.sourceforge.plantuml.ugraphic.color.HColor getFontHtmlColor(net.sourceforge.plantuml.cucadiagram.Stereotype, net.sourceforge.plantuml.FontParam[])
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r2;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;
        net.sourceforge.plantuml.FontParam[] r5;
        net.sourceforge.plantuml.FontParam $r6;
        java.lang.StringBuilder $r7, $r8, $r11;
        net.sourceforge.plantuml.Guillemet $r9;
        java.lang.String $r10, $r12, r13;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r5 := @parameter1: net.sourceforge.plantuml.FontParam[];

        r13 = null;

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fontcolor");

        $r9 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r13 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>($r12, r5);

     label1:
        if r13 != null goto label2;

        r13 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>("fontcolor", r5);

     label2:
        if r13 != null goto label3;

        r13 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("defaultfontcolor");

     label3:
        if r13 != null goto label4;

        $r6 = r5[0];

        r13 = virtualinvoke $r6.<net.sourceforge.plantuml.FontParam: java.lang.String getDefaultColor()>();

     label4:
        if r13 != null goto label5;

        return null;

     label5:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r3 = r1.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r3, r13);

        return $r4;
    }

    private transient java.lang.String getFirstValueNonNullWithSuffix(java.lang.String, net.sourceforge.plantuml.FontParam[])
    {
        net.sourceforge.plantuml.FontParam[] r0;
        int i0, i1;
        net.sourceforge.plantuml.FontParam r2;
        net.sourceforge.plantuml.SkinParam r3;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.lang.String $r5, r7, $r9, r10;

        r3 := @this: net.sourceforge.plantuml.SkinParam;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: net.sourceforge.plantuml.FontParam[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r0[i1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.FontParam: java.lang.String name()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = virtualinvoke r3.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r9);

        if r10 == null goto label2;

        return r10;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private transient int getFontStyle(net.sourceforge.plantuml.cucadiagram.Stereotype, boolean, net.sourceforge.plantuml.FontParam[])
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        java.lang.String $r1, $r2, $r9, $r11, r12;
        boolean $z0, $z1, z2;
        net.sourceforge.plantuml.FontParam[] r3;
        net.sourceforge.plantuml.SkinParam r4;
        net.sourceforge.plantuml.FontParam $r5;
        int $i0, i1;
        java.lang.StringBuilder $r6, $r7, $r10;
        net.sourceforge.plantuml.Guillemet $r8;

        r4 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        z2 := @parameter1: boolean;

        r3 := @parameter2: net.sourceforge.plantuml.FontParam[];

        r12 = null;

        if r0 == null goto label1;

        specialinvoke r4.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fontstyle");

        $r8 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = specialinvoke r4.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>($r11, r3);

     label1:
        if r12 != null goto label2;

        r12 = specialinvoke r4.<net.sourceforge.plantuml.SkinParam: java.lang.String getFirstValueNonNullWithSuffix(java.lang.String,net.sourceforge.plantuml.FontParam[])>("fontstyle", r3);

     label2:
        if r12 != null goto label3;

        r12 = virtualinvoke r4.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("defaultfontstyle");

     label3:
        if r12 != null goto label4;

        $r5 = r3[0];

        $i0 = virtualinvoke $r5.<net.sourceforge.plantuml.FontParam: int getDefaultFontStyle(net.sourceforge.plantuml.ISkinParam,boolean)>(r4, z2);

        return $i0;

     label4:
        i1 = 0;

        $r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>(r12);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("bold");

        if $z0 == 0 goto label5;

        i1 = 0 | 1;

     label5:
        $r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>(r12);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("italic");

        if $z1 == 0 goto label6;

        i1 = i1 | 2;

     label6:
        return i1;
    }

    public transient net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype, boolean, net.sourceforge.plantuml.FontParam[])
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.FontParam[] r2;
        java.lang.String r3;
        boolean z0;
        int i0, i1;
        net.sourceforge.plantuml.ugraphic.UFont $r4;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        z0 := @parameter1: boolean;

        r2 := @parameter2: net.sourceforge.plantuml.FontParam[];

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

     label1:
        r3 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getFontFamily(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.FontParam[])>(r0, r2);

        i0 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: int getFontStyle(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(r0, z0, r2);

        i1 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: int getFontSize(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.FontParam[])>(r0, r2);

        $r4 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>(r3, i0, i1);

        return $r4;
    }

    public int getCircledCharacterRadius()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.FontParam[] $r1;
        net.sourceforge.plantuml.FontParam $r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("circledCharacterRadius", -1);

        if i0 != -1 goto label1;

        $r1 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r2 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r1[0] = $r2;

        $i1 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getFontSize(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.FontParam[])>(null, $r1);

        $i2 = $i1 / 3;

        $i3 = $i2 + 6;

        goto label2;

     label1:
        $i3 = i0;

     label2:
        return $i3;
    }

    public int classAttributeIconSize()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("classAttributeIconSize", 10);

        return $i0;
    }

    public static java.util.Collection getPossibleValues()
    {
        java.util.TreeSet $r0;
        java.util.EnumSet $r2, $r3, $r4, $r5;
        boolean $z52, $z53, $z54, $z55;
        java.util.Set $r6;
        java.lang.Object $r7, $r9, $r15, $r21;
        java.lang.String $r8, $r10, $r14, $r16, $r20, $r22, $r26, $r30, $r34, $r38, r41, r44, r47, r50;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19, $r23, $r24, $r25, $r27, $r28, $r29, $r31, $r32, $r33, $r35, $r36, $r37;
        java.util.Iterator r39, r42, r45, r48;
        net.sourceforge.plantuml.FontParam r40;
        net.sourceforge.plantuml.ColorParam r43;
        net.sourceforge.plantuml.LineParam r46;
        net.sourceforge.plantuml.AlignmentParam r49;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Monochrome");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("CircledCharacterRadius");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ClassAttributeIconSize");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("DefaultFontName");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("DefaultFontStyle");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("DefaultFontSize");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("DefaultFontColor");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("MinClassWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("MinClassWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Dpi");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("DefaultTextAlignment");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Shadowing");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("NoteShadowing");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Handwritten");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("CircledCharacterRadius");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ClassAttributeIconSize");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Linetype");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("PackageStyle");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ComponentStyle");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("StereotypePosition");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Nodesep");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Ranksep");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("RoundCorner");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("TitleBorderRoundCorner");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("MaxMessageSize");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Style");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("SequenceParticipant");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ConditionStyle");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ConditionEndStyle");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("SameClassWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("HyperlinkUnderline");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Padding");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("BoxPadding");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ParticipantPadding");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("Guillemet");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("SvglinkTarget");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("DefaultMonospacedFontName");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("TabSize");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("MaxAsciiMessageLength");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ColorArrowSeparationSpace");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("ResponseMessageBelowArrow");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("GenericDisplay");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("PathHoverColor");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("SwimlaneWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("PageBorderColor");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("PageExternalColor");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("PageMargin");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("WrapWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("SwimlaneWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("SwimlaneWrapTitleWidth");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("FixCircleLabelOverlapping");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("LifelineStrategy");

        $r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/FontParam;");

        r39 = virtualinvoke $r2.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z52 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z52 == 0 goto label2;

        $r21 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (net.sourceforge.plantuml.FontParam) $r21;

        $r22 = virtualinvoke r40.<net.sourceforge.plantuml.FontParam: java.lang.String name()>();

        r41 = staticinvoke <net.sourceforge.plantuml.SkinParam: java.lang.String humanName(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontStyle");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontName");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontSize");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r34);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontColor");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r38);

        goto label1;

     label2:
        $r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ColorParam;");

        r42 = virtualinvoke $r3.<java.util.EnumSet: java.util.Iterator iterator()>();

     label3:
        $z53 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z53 == 0 goto label4;

        $r15 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (net.sourceforge.plantuml.ColorParam) $r15;

        $r16 = virtualinvoke r43.<net.sourceforge.plantuml.ColorParam: java.lang.String name()>();

        r44 = staticinvoke <net.sourceforge.plantuml.SkinParam: java.lang.String capitalize(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Color");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r20);

        goto label3;

     label4:
        $r4 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/LineParam;");

        r45 = virtualinvoke $r4.<java.util.EnumSet: java.util.Iterator iterator()>();

     label5:
        $z54 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>();

        if $z54 == 0 goto label6;

        $r9 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>();

        r46 = (net.sourceforge.plantuml.LineParam) $r9;

        $r10 = virtualinvoke r46.<net.sourceforge.plantuml.LineParam: java.lang.String name()>();

        r47 = staticinvoke <net.sourceforge.plantuml.SkinParam: java.lang.String capitalize(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thickness");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r14);

        goto label5;

     label6:
        $r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/AlignmentParam;");

        r48 = virtualinvoke $r5.<java.util.EnumSet: java.util.Iterator iterator()>();

     label7:
        $z55 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z55 == 0 goto label8;

        $r7 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (net.sourceforge.plantuml.AlignmentParam) $r7;

        $r8 = virtualinvoke r49.<net.sourceforge.plantuml.AlignmentParam: java.lang.String name()>();

        r50 = staticinvoke <net.sourceforge.plantuml.SkinParam: java.lang.String capitalize(java.lang.String)>($r8);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r50);

        goto label7;

     label8:
        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r6;
    }

    private static java.lang.String capitalize(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r4, $r6;
        java.lang.String r1, $r2, $r3, $r5, $r7;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r3 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int getDpi()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int i1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        i1 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("dpi", 96);

        if i1 > 0 goto label1;

        return 96;

     label1:
        return i1;
    }

    public net.sourceforge.plantuml.cucadiagram.dot.DotSplines getDotSplines()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.cucadiagram.dot.DotSplines $r4, $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("linetype");

        $r2 = "polyline";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r6 = <net.sourceforge.plantuml.cucadiagram.dot.DotSplines: net.sourceforge.plantuml.cucadiagram.dot.DotSplines POLYLINE>;

        return $r6;

     label1:
        $r3 = "ortho";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $r5 = <net.sourceforge.plantuml.cucadiagram.dot.DotSplines: net.sourceforge.plantuml.cucadiagram.dot.DotSplines ORTHO>;

        return $r5;

     label2:
        $r4 = <net.sourceforge.plantuml.cucadiagram.dot.DotSplines: net.sourceforge.plantuml.cucadiagram.dot.DotSplines SPLINES>;

        return $r4;
    }

    public net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment(net.sourceforge.plantuml.AlignmentParam, net.sourceforge.plantuml.skin.ArrowDirection, boolean, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.AlignmentParam r0, $r3, $r10, $r13, $r35;
        int[] $r1;
        int $i0, $i1;
        net.sourceforge.plantuml.SkinParam r2;
        java.lang.String $r4, $r5, $r6, $r7, $r36, $r37, $r38, r39, $r40;
        boolean $z0, $z1, z2, $z3;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r8, $r9, $r11, $r12, r14, $r15, $r21, $r22, $r23, $r27, $r28, $r29, $r31, $r32, $r33, $r34, $r41;
        net.sourceforge.plantuml.skin.ArrowDirection r17, $r18, $r19, $r20, $r24, $r25, $r26, $r30;

        r2 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.AlignmentParam;

        r17 := @parameter1: net.sourceforge.plantuml.skin.ArrowDirection;

        z2 := @parameter2: boolean;

        r14 := @parameter3: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r1 = <net.sourceforge.plantuml.SkinParam$1: int[] $SwitchMap$net$sourceforge$plantuml$AlignmentParam>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.AlignmentParam: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            default: goto label03;
        };

     label01:
        $r35 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam sequenceMessageAlignment>;

        $r36 = virtualinvoke $r35.<net.sourceforge.plantuml.AlignmentParam: java.lang.String name()>();

        $r37 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r36);

        r39 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.String getArg(java.lang.String,int)>($r37, 0);

        goto label04;

     label02:
        $r3 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam sequenceMessageAlignment>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.AlignmentParam: java.lang.String name()>();

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r4);

        r39 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.String getArg(java.lang.String,int)>($r5, 1);

        goto label04;

     label03:
        $r38 = virtualinvoke r0.<net.sourceforge.plantuml.AlignmentParam: java.lang.String name()>();

        r39 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r38);

     label04:
        $r40 = "first";

        $z3 = virtualinvoke $r40.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r39);

        if $z3 == 0 goto label08;

        $r30 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection RIGHT_TO_LEFT_REVERSE>;

        if r17 != $r30 goto label06;

        if z2 == 0 goto label05;

        $r34 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r34;

     label05:
        $r33 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        return $r33;

     label06:
        if z2 == 0 goto label07;

        $r32 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        return $r32;

     label07:
        $r31 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r31;

     label08:
        $r6 = "direction";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r39);

        if $z0 == 0 goto label11;

        $r24 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection LEFT_TO_RIGHT_NORMAL>;

        if r17 != $r24 goto label09;

        $r29 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r29;

     label09:
        $r25 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection RIGHT_TO_LEFT_REVERSE>;

        if r17 != $r25 goto label10;

        $r28 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        return $r28;

     label10:
        $r26 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection BOTH_DIRECTION>;

        if r17 != $r26 goto label11;

        $r27 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        return $r27;

     label11:
        $r7 = "reversedirection";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r39);

        if $z1 == 0 goto label14;

        $r18 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection LEFT_TO_RIGHT_NORMAL>;

        if r17 != $r18 goto label12;

        $r23 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        return $r23;

     label12:
        $r19 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection RIGHT_TO_LEFT_REVERSE>;

        if r17 != $r19 goto label13;

        $r22 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r22;

     label13:
        $r20 = <net.sourceforge.plantuml.skin.ArrowDirection: net.sourceforge.plantuml.skin.ArrowDirection BOTH_DIRECTION>;

        if r17 != $r20 goto label14;

        $r21 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        return $r21;

     label14:
        r8 = staticinvoke <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment fromString(java.lang.String)>(r39);

        if r8 != null goto label17;

        $r13 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam noteTextAlignment>;

        if r0 != $r13 goto label17;

        if r14 != null goto label15;

        $r41 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        goto label16;

     label15:
        $r41 = r14;

     label16:
        $r15 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r41);

        return $r15;

     label17:
        if r8 != null goto label18;

        $r10 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam stateMessageAlignment>;

        if r0 != $r10 goto label18;

        $r11 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r11);

        return $r12;

     label18:
        if r8 != null goto label19;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultValue()>();

        return $r9;

     label19:
        return r8;
    }

    public net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r2, r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("defaulttextalignment");

        r2 = staticinvoke <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment fromString(java.lang.String)>(r1);

        if r2 != null goto label1;

        return r3;

     label1:
        return r2;
    }

    public net.sourceforge.plantuml.graphic.HorizontalAlignment getStereotypeAlignment()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("stereotypealignment");

        r2 = staticinvoke <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment fromString(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r3 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        return $r3;

     label1:
        return r2;
    }

    private java.lang.String getArg(java.lang.String, int)
    {
        java.lang.String r0, $r2, $r3;
        java.lang.String[] r1;
        int i0, $i1;
        net.sourceforge.plantuml.SkinParam r4;

        r4 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i1 = lengthof r1;

        if i0 < $i1 goto label2;

        $r3 = r1[0];

        return $r3;

     label2:
        $r2 = r1[i0];

        return $r2;
    }

    public net.sourceforge.plantuml.ugraphic.color.ColorMapper getColorMapper()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.api.ThemeStyle $r1, $r2;
        java.lang.String r3, $r4, $r5, r6, $r7;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ugraphic.color.ColorOrder r8;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperReverse $r9;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity $r10, $r12;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperLightnessInverse $r11;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome $r13, $r14;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperForceDark $r15;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r2 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r1 = <net.sourceforge.plantuml.api.ThemeStyle: net.sourceforge.plantuml.api.ThemeStyle DARK>;

        if $r2 != $r1 goto label1;

        $r15 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperForceDark;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.color.ColorMapperForceDark: void <init>()>();

        return $r15;

     label1:
        r3 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("monochrome");

        $r4 = "true";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        $r14 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome: void <init>(boolean)>(0);

        return $r14;

     label2:
        $r5 = "reverse";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        $r13 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome: void <init>(boolean)>(1);

        return $r13;

     label3:
        r6 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("reversecolor");

        if r6 != null goto label4;

        $r12 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        return $r12;

     label4:
        $r7 = "dark";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z2 == 0 goto label5;

        $r11 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperLightnessInverse;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapperLightnessInverse: void <init>()>();

        return $r11;

     label5:
        r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.ColorOrder: net.sourceforge.plantuml.ugraphic.color.ColorOrder fromString(java.lang.String)>(r6);

        if r8 != null goto label6;

        $r10 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        return $r10;

     label6:
        $r9 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperReverse;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapperReverse: void <init>(net.sourceforge.plantuml.ugraphic.color.ColorOrder)>(r8);

        return $r9;
    }

    public boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        java.lang.String $r2, $r3, $r7, $r9, r10, r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r5, $r8;
        net.sourceforge.plantuml.Guillemet $r6;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shadowing");

        $r6 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r9);

        if r10 == null goto label1;

        $z3 = virtualinvoke r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        return $z3;

     label1:
        r11 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("shadowing");

        $r2 = "false";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r11);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r3 = "true";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r11);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z2 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: boolean strictUmlStyle()>();

        if $z2 == 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public boolean shadowingForNote(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r6;
        net.sourceforge.plantuml.Guillemet $r4;
        java.lang.String $r5, $r7, r8, r9;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        if r0 == null goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("noteshadowing");

        $r4 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r7);

        if r8 == null goto label1;

        $z2 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        return $z2;

     label1:
        r9 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("noteshadowing");

        if r9 == null goto label2;

        $z1 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        return $z1;

     label2:
        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        return $z0;
    }

    public boolean shadowing2(net.sourceforge.plantuml.cucadiagram.Stereotype, net.sourceforge.plantuml.graphic.SkinParameter)
    {
        net.sourceforge.plantuml.graphic.SkinParameter r0, $r2;
        java.lang.Object $r1;
        java.lang.String r3, $r9, $r10, $r11, $r16, $r18, r19, r20;
        net.sourceforge.plantuml.cucadiagram.Stereotype r4;
        net.sourceforge.plantuml.SkinParam r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.Guillemet $r15;

        r5 := @this: net.sourceforge.plantuml.SkinParam;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r0 := @parameter1: net.sourceforge.plantuml.graphic.SkinParameter;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r2 = (net.sourceforge.plantuml.graphic.SkinParameter) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.SkinParameter: java.lang.String getUpperCaseName()>();

        if r4 == null goto label1;

        specialinvoke r5.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r4);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shadowing");

        $r15 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r16 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r19 = virtualinvoke r5.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r18);

        if r19 == null goto label1;

        $z4 = virtualinvoke r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        return $z4;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shadowing");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r20 = virtualinvoke r5.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r9);

        if r20 != null goto label2;

        $z3 = virtualinvoke r5.<net.sourceforge.plantuml.SkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r4);

        return $z3;

     label2:
        $r10 = "false";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r20);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        $r11 = "true";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r20);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $z2 = virtualinvoke r5.<net.sourceforge.plantuml.SkinParam: boolean strictUmlStyle()>();

        if $z2 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public java.util.Collection getAllSpriteNames()
    {
        java.util.TreeSet $r0;
        net.sourceforge.plantuml.SkinParam r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Collection $r4;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        $r0 = new java.util.TreeSet;

        $r2 = r1.<net.sourceforge.plantuml.SkinParam: java.util.Map sprites>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r0);

        return $r4;
    }

    public void addSprite(java.lang.String, net.sourceforge.plantuml.sprite.Sprite)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sprite.Sprite r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.sprite.Sprite;

        $r3 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map sprites>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.sprite.Sprite getSprite(java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sprite.Sprite r4;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map sprites>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.sourceforge.plantuml.sprite.Sprite) $r3;

        if r4 != null goto label1;

        r4 = staticinvoke <net.sourceforge.plantuml.sprite.SpriteImage: net.sourceforge.plantuml.sprite.Sprite fromInternal(java.lang.String)>(r1);

     label1:
        return r4;
    }

    public net.sourceforge.plantuml.svek.PackageStyle packageStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.svek.PackageStyle r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("packageStyle");

        r2 = staticinvoke <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle fromString(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r3 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FOLDER>;

        return $r3;

     label1:
        return r2;
    }

    public net.sourceforge.plantuml.ComponentStyle componentStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.ComponentStyle $r5, $r6, $r7, $r8, $r9;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean strictUmlStyle()>();

        if $z0 == 0 goto label1;

        $r9 = <net.sourceforge.plantuml.ComponentStyle: net.sourceforge.plantuml.ComponentStyle UML2>;

        return $r9;

     label1:
        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("componentstyle");

        $r2 = "uml1";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $r8 = <net.sourceforge.plantuml.ComponentStyle: net.sourceforge.plantuml.ComponentStyle UML1>;

        return $r8;

     label2:
        $r3 = "uml2";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $r7 = <net.sourceforge.plantuml.ComponentStyle: net.sourceforge.plantuml.ComponentStyle UML2>;

        return $r7;

     label3:
        $r4 = "rectangle";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z3 == 0 goto label4;

        $r6 = <net.sourceforge.plantuml.ComponentStyle: net.sourceforge.plantuml.ComponentStyle RECTANGLE>;

        return $r6;

     label4:
        $r5 = <net.sourceforge.plantuml.ComponentStyle: net.sourceforge.plantuml.ComponentStyle UML2>;

        return $r5;
    }

    public boolean stereotypePositionTop()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>("stereotypePosition", "bottom");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.UmlDiagramType r0, $r1;
        net.sourceforge.plantuml.SkinParam r2;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r1 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if r0 == $r1 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: boolean swimlanes()>();

        return $z0;
    }

    public boolean swimlanes()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean isTrue(java.lang.String)>("swimlane");

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean isTrue(java.lang.String)>("swimlanes");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public double getNodesep()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("nodesep", 0);

        $d0 = (double) $i0;

        return $d0;
    }

    public double getRanksep()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("ranksep", 0);

        $d0 = (double) $i0;

        return $d0;
    }

    public double getDiagonalCorner(net.sourceforge.plantuml.CornerParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.CornerParam r0, $r4, $r5;
        java.lang.String r1;
        net.sourceforge.plantuml.SkinParam r2;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3;
        double $d0, $d1, $d2;
        java.lang.Double r6, r7;

        r2 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.CornerParam;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.CornerParam: java.lang.String getDiagonalKey()>();

        r6 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.Double getCornerInternal(java.lang.String,net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1, r0, r3);

        if r6 == null goto label1;

        $d2 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        return $d2;

     label1:
        r7 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.Double getCornerInternal(java.lang.String,net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1, r0, null);

        if r7 == null goto label2;

        $d1 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        return $d1;

     label2:
        $r4 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        if r0 != $r4 goto label3;

        return 0.0;

     label3:
        $r5 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: double getDiagonalCorner(net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5, r3);

        return $d0;
    }

    public double getRoundCorner(net.sourceforge.plantuml.CornerParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.CornerParam r0, $r4, $r5;
        java.lang.String r1;
        net.sourceforge.plantuml.SkinParam r2;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3;
        double $d0, $d1, $d2;
        java.lang.Double r6, r7;

        r2 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.CornerParam;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.CornerParam: java.lang.String getRoundKey()>();

        r6 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.Double getCornerInternal(java.lang.String,net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1, r0, r3);

        if r6 == null goto label1;

        $d2 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        return $d2;

     label1:
        r7 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: java.lang.Double getCornerInternal(java.lang.String,net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1, r0, null);

        if r7 == null goto label2;

        $d1 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        return $d1;

     label2:
        $r4 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        if r0 != $r4 goto label3;

        return 0.0;

     label3:
        $r5 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.SkinParam: double getRoundCorner(net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5, r3);

        return $d0;
    }

    private java.lang.Double getCornerInternal(java.lang.String, net.sourceforge.plantuml.CornerParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        java.lang.String r2, $r7, r10;
        boolean $z0;
        double $d0;
        java.lang.Double $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        net.sourceforge.plantuml.Guillemet $r6;
        net.sourceforge.plantuml.CornerParam r9;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r10 := @parameter0: java.lang.String;

        r9 := @parameter1: net.sourceforge.plantuml.CornerParam;

        r0 := @parameter2: net.sourceforge.plantuml.cucadiagram.Stereotype;

        if r0 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r2 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>(r10);

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z0 == 0 goto label2;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;

     label2:
        return null;
    }

    public net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.SkinParam r1;
        net.sourceforge.plantuml.LineParam r2;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3, $r10, $r28;
        java.lang.StringBuilder $r4, $r6, $r7, $r11, $r13, $r14, $r17, $r19, $r21, $r22, $r25, $r32, $r34, $r35;
        java.lang.String $r5, $r8, $r12, $r16, $r18, $r20, $r24, $r26, r30, r31, $r33, $r36, r37, r38;
        double $d0, $d1;
        net.sourceforge.plantuml.cucadiagram.LinkStyle $r9, $r27, r29;
        net.sourceforge.plantuml.Guillemet $r15, $r23;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        r2 := @parameter0: net.sourceforge.plantuml.LineParam;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r29 = null;

        if r0 == null goto label3;

        specialinvoke r1.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.LineParam: java.lang.String name()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("style");

        $r15 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r30 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r18);

        if r30 == null goto label1;

        r29 = staticinvoke <net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle fromString2(java.lang.String)>(r30);

     label1:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r2.<net.sourceforge.plantuml.LineParam: java.lang.String name()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thickness");

        $r23 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r26);

        if r31 == null goto label3;

        $z2 = virtualinvoke r31.<java.lang.String: boolean matches(java.lang.String)>("[\\d.]+");

        if $z2 == 0 goto label3;

        if r29 != null goto label2;

        r29 = staticinvoke <net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle NORMAL()>();

     label2:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r31);

        $r27 = virtualinvoke r29.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle goThickness(double)>($d1);

        $r28 = virtualinvoke $r27.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.ugraphic.UStroke getStroke3()>();

        return $r28;

     label3:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke r2.<net.sourceforge.plantuml.LineParam: java.lang.String name()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thickness");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        r37 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r36);

        if r37 == null goto label5;

        $z1 = virtualinvoke r37.<java.lang.String: boolean matches(java.lang.String)>("[\\d.]+");

        if $z1 == 0 goto label5;

        if r29 != null goto label4;

        r29 = staticinvoke <net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle NORMAL()>();

     label4:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r37);

        $r9 = virtualinvoke r29.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle goThickness(double)>($d0);

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.ugraphic.UStroke getStroke3()>();

        return $r10;

     label5:
        if r29 != null goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.LineParam: java.lang.String name()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("style");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r38 = virtualinvoke r1.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r8);

        if r38 == null goto label6;

        r29 = staticinvoke <net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle fromString2(java.lang.String)>(r38);

     label6:
        if r29 == null goto label7;

        $z0 = virtualinvoke r29.<net.sourceforge.plantuml.cucadiagram.LinkStyle: boolean isNormal()>();

        if $z0 != 0 goto label7;

        $r3 = virtualinvoke r29.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.ugraphic.UStroke getStroke3()>();

        return $r3;

     label7:
        return null;
    }

    public net.sourceforge.plantuml.LineBreakStrategy maxMessageSize()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.LineBreakStrategy $r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("wrapmessagewidth");

        if r2 != null goto label1;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("maxmessagesize");

     label1:
        $r1 = new net.sourceforge.plantuml.LineBreakStrategy;

        specialinvoke $r1.<net.sourceforge.plantuml.LineBreakStrategy: void <init>(java.lang.String)>(r2);

        return $r1;
    }

    public net.sourceforge.plantuml.LineBreakStrategy wrapWidth()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.LineBreakStrategy $r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("wrapwidth");

        $r2 = new net.sourceforge.plantuml.LineBreakStrategy;

        specialinvoke $r2.<net.sourceforge.plantuml.LineBreakStrategy: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    public net.sourceforge.plantuml.LineBreakStrategy swimlaneWrapTitleWidth()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.LineBreakStrategy $r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("swimlanewraptitlewidth");

        $r2 = new net.sourceforge.plantuml.LineBreakStrategy;

        specialinvoke $r2.<net.sourceforge.plantuml.LineBreakStrategy: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    public boolean strictUmlStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>("style", "strictuml");

        return $z0;
    }

    public boolean forceSequenceParticipantUnderlined()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>("sequenceParticipant", "underline");

        return $z0;
    }

    public net.sourceforge.plantuml.svek.ConditionStyle getConditionStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.svek.ConditionStyle r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("conditionStyle");

        r2 = staticinvoke <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle fromString(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r3 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_HEXAGON>;

        return $r3;

     label1:
        return r2;
    }

    public net.sourceforge.plantuml.svek.ConditionEndStyle getConditionEndStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.svek.ConditionEndStyle r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("conditionEndStyle");

        r2 = staticinvoke <net.sourceforge.plantuml.svek.ConditionEndStyle: net.sourceforge.plantuml.svek.ConditionEndStyle fromString(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r3 = <net.sourceforge.plantuml.svek.ConditionEndStyle: net.sourceforge.plantuml.svek.ConditionEndStyle DIAMOND>;

        return $r3;

     label1:
        return r2;
    }

    public double minClassWidth()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("minclasswidth", 0);

        $d0 = (double) $i0;

        return $d0;
    }

    public boolean sameClassWidth()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean isTrue(java.lang.String)>("sameclasswidth");

        return $z0;
    }

    public final net.sourceforge.plantuml.cucadiagram.Rankdir getRankdir()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.cucadiagram.Rankdir $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.cucadiagram.Rankdir rankdir>;

        return $r1;
    }

    public final void setRankdir(net.sourceforge.plantuml.cucadiagram.Rankdir)
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.cucadiagram.Rankdir r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.Rankdir;

        r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.cucadiagram.Rankdir rankdir> = r1;

        return;
    }

    public boolean useOctagonForActivity(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        java.lang.String $r2, $r6, $r8, r9, r10, $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r7;
        net.sourceforge.plantuml.Guillemet $r5;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r10 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("activityshape");

        if r1 == null goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.SkinParam: void checkStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("activityshape");

        $r5 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>($r8);

        if r9 == null goto label1;

        r10 = r9;

     label1:
        $r11 = "roundedbox";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r10);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r2 = "octagon";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r10);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet htmlColorSet>;

        return $r1;
    }

    public boolean useUnderlineForHyperlink()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>("hyperlinkunderline", "false");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int groupInheritance()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int i0, $i1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("groupinheritance", 2147483647);

        if i0 > 1 goto label1;

        $i1 = 2147483647;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    public net.sourceforge.plantuml.Guillemet guillemet()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.Guillemet $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("guillemet");

        $r2 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet GUILLEMET>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet fromDescription(java.lang.String)>(r1);

        return $r3;
    }

    public boolean handwritten()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean isTrue(java.lang.String)>("handwritten");

        return $z0;
    }

    public java.lang.String getSvgLinkTarget()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String,java.lang.String)>("svglinktarget", "_top");

        return $r1;
    }

    public java.lang.String getPreserveAspectRatio()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String,java.lang.String)>("preserveaspectratio", "none");

        return $r1;
    }

    public java.lang.String getMonospacedFamily()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String,java.lang.String)>("defaultMonospacedFontName", "monospaced");

        return $r1;
    }

    public int getTabSize()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("tabsize", 8);

        return $i0;
    }

    public int maxAsciiMessageLength()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("maxasciimessagelength", -1);

        return $i0;
    }

    public int colorArrowSeparationSpace()
    {
        net.sourceforge.plantuml.SkinParam r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("colorarrowseparationspace", 0);

        return $i0;
    }

    public net.sourceforge.plantuml.SplitParam getSplitParam()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, r2;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r3, $r6;
        net.sourceforge.plantuml.api.ThemeStyle $r4, $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r5, $r10, $r11;
        int i0;
        net.sourceforge.plantuml.SplitParam $r9;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("pageBorderColor");

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("pageExternalColor");

        if r1 != null goto label1;

        $r10 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r4 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r10 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r4, r1);

     label2:
        r5 = $r10;

        if r2 != null goto label3;

        $r11 = null;

        goto label4;

     label3:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r7 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r11 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r7, r2);

     label4:
        i0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: int getAsInt(java.lang.String,int)>("pageMargin", 0);

        $r9 = new net.sourceforge.plantuml.SplitParam;

        specialinvoke $r9.<net.sourceforge.plantuml.SplitParam: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,int)>(r5, $r11, i0);

        return $r9;
    }

    public int swimlaneWidth()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("swimlanewidth");

        $r2 = "same";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z1 == 0 goto label2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        return $i0;

     label2:
        return 0;
    }

    public net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.UmlDiagramType $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.UmlDiagramType type>;

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor hoverPathColor()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r2;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("pathhovercolor");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r3 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>($r3, r1, null);

        return $r4;
    }

    public double getPadding()
    {
        net.sourceforge.plantuml.SkinParam r1;
        double $d0;

        r1 := @this: net.sourceforge.plantuml.SkinParam;

        $d0 = specialinvoke r1.<net.sourceforge.plantuml.SkinParam: double getAsDouble(java.lang.String)>("padding");

        return $d0;
    }

    public double getPadding(net.sourceforge.plantuml.PaddingParam)
    {
        net.sourceforge.plantuml.PaddingParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.SkinParam r2;
        double $d0;

        r2 := @this: net.sourceforge.plantuml.SkinParam;

        r0 := @parameter0: net.sourceforge.plantuml.PaddingParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.PaddingParam: java.lang.String getSkinName()>();

        $d0 = specialinvoke r2.<net.sourceforge.plantuml.SkinParam: double getAsDouble(java.lang.String)>(r1);

        return $d0;
    }

    private double getAsDouble(java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, r2;
        boolean $z0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>(r1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean matches(java.lang.String)>("\\d+(\\.\\d+)?");

        if $z0 == 0 goto label1;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

        return $d0;

     label1:
        return 0.0;
    }

    private int getAsInt(java.lang.String, int)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>(r1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        return $i1;

     label1:
        return i0;
    }

    public boolean useRankSame()
    {
        net.sourceforge.plantuml.SkinParam r0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        return 0;
    }

    public boolean displayGenericWithOldFashion()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>("genericDisplay", "old");

        return $z0;
    }

    public boolean responseMessageBelowArrow()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean isTrue(java.lang.String)>("responsemessagebelowarrow");

        return $z0;
    }

    public net.sourceforge.plantuml.TikzFontDistortion getTikzFontDistortion()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1;
        net.sourceforge.plantuml.TikzFontDistortion $r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("tikzFont");

        $r2 = staticinvoke <net.sourceforge.plantuml.TikzFontDistortion: net.sourceforge.plantuml.TikzFontDistortion fromValue(java.lang.String)>(r1);

        return $r2;
    }

    public boolean svgDimensionStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean valueIs(java.lang.String,java.lang.String)>("svgdimensionstyle", "false");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean fixCircleLabelOverlapping()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: boolean isTrue(java.lang.String)>("fixcirclelabeloverlapping");

        return $z0;
    }

    public void setUseVizJs(boolean)
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.SkinParam: boolean useVizJs> = z0;

        return;
    }

    public boolean isUseVizJs()
    {
        net.sourceforge.plantuml.SkinParam r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $z0 = r0.<net.sourceforge.plantuml.SkinParam: boolean useVizJs>;

        return $z0;
    }

    public net.sourceforge.plantuml.skin.Padder sequenceDiagramPadder()
    {
        net.sourceforge.plantuml.SkinParam r0;
        double d0, d1, d2;
        java.lang.String r1, r2;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r3, $r6;
        net.sourceforge.plantuml.api.ThemeStyle $r4, $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r5, $r17, $r18;
        net.sourceforge.plantuml.CornerParam $r9;
        net.sourceforge.plantuml.skin.Padder $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        d0 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: double getAsDouble(java.lang.String)>("SequenceMessagePadding");

        d1 = specialinvoke r0.<net.sourceforge.plantuml.SkinParam: double getAsDouble(java.lang.String)>("SequenceMessageMargin");

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("SequenceMessageBorderColor");

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("SequenceMessageBackGroundColor");

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d1 cmpl 0.0;

        if $b1 != 0 goto label1;

        if r1 != null goto label1;

        if r2 != null goto label1;

        $r16 = <net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder NONE>;

        return $r16;

     label1:
        if r1 != null goto label2;

        $r17 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r4 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r17 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r4, r1);

     label3:
        r5 = $r17;

        if r2 != null goto label4;

        $r18 = null;

        goto label5;

     label4:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r7 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        $r18 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r7, r2);

     label5:
        $r9 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        d2 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: double getRoundCorner(net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r9, null);

        $r10 = <net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder NONE>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder withMargin(double)>(d1);

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder withPadding(double)>(d0);

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder withBackgroundColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r18);

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder withBorderColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r5);

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.skin.Padder: net.sourceforge.plantuml.skin.Padder withRoundCorner(double)>(d2);

        return $r15;
    }

    public net.sourceforge.plantuml.skin.ActorStyle actorStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.skin.ActorStyle $r4, $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("actorstyle");

        $r2 = "awesome";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r6 = <net.sourceforge.plantuml.skin.ActorStyle: net.sourceforge.plantuml.skin.ActorStyle AWESOME>;

        return $r6;

     label1:
        $r3 = "hollow";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $r5 = <net.sourceforge.plantuml.skin.ActorStyle: net.sourceforge.plantuml.skin.ActorStyle HOLLOW>;

        return $r5;

     label2:
        $r4 = <net.sourceforge.plantuml.skin.ActorStyle: net.sourceforge.plantuml.skin.ActorStyle STICKMAN>;

        return $r4;
    }

    public void setSvgSize(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, $r3, r4, $r5;
        java.util.Map $r2;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map svgCharSizes>;

        $r3 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String manageUnicodeNotationUplus(java.lang.String)>(r1);

        $r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String manageUnicodeNotationUplus(java.lang.String)>(r4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        return;
    }

    public java.lang.String transformStringForSizeHack(java.lang.String)
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4, $r6, $r8;
        java.util.Map$Entry r5;
        java.lang.CharSequence $r7, $r9;
        java.lang.String r10;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r10 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: java.util.Map svgCharSizes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.CharSequence) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.CharSequence) $r8;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r7, $r9);

        goto label1;

     label2:
        return r10;
    }

    public net.sourceforge.plantuml.svg.LengthAdjust getlengthAdjust()
    {
        net.sourceforge.plantuml.SkinParam r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.svg.LengthAdjust $r5, $r6, $r7, $r8;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SkinParam: java.lang.String getValue(java.lang.String)>("lengthAdjust");

        $r2 = "spacingAndGlyphs";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r8 = <net.sourceforge.plantuml.svg.LengthAdjust: net.sourceforge.plantuml.svg.LengthAdjust SPACING_AND_GLYPHS>;

        return $r8;

     label1:
        $r3 = "spacing";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $r7 = <net.sourceforge.plantuml.svg.LengthAdjust: net.sourceforge.plantuml.svg.LengthAdjust SPACING>;

        return $r7;

     label2:
        $r4 = "none";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $r6 = <net.sourceforge.plantuml.svg.LengthAdjust: net.sourceforge.plantuml.svg.LengthAdjust NONE>;

        return $r6;

     label3:
        $r5 = staticinvoke <net.sourceforge.plantuml.svg.LengthAdjust: net.sourceforge.plantuml.svg.LengthAdjust defaultValue()>();

        return $r5;
    }

    public net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()
    {
        net.sourceforge.plantuml.SkinParam r0;
        net.sourceforge.plantuml.api.ThemeStyle $r1;

        r0 := @this: net.sourceforge.plantuml.SkinParam;

        $r1 = r0.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle themeStyle>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;

        <net.sourceforge.plantuml.SkinParam: java.lang.String stereoPatternString> = "\\<\\<(.*?)\\>\\>";

        <net.sourceforge.plantuml.SkinParam: java.lang.String DEFAULT_PRESERVE_ASPECT_RATIO> = "none";

        $r0 = class "Lnet/sourceforge/plantuml/SkinParam;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.SkinParam: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\<\\<(.*?)\\>\\>");

        <net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.command.regex.Pattern2 stereoPattern> = $r1;

        return;
    }
}
