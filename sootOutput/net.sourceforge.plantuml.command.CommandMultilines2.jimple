public abstract class net.sourceforge.plantuml.command.CommandMultilines2 extends java.lang.Object implements net.sourceforge.plantuml.command.Command
{
    private final net.sourceforge.plantuml.command.regex.IRegex starting;
    private final net.sourceforge.plantuml.command.MultilinesStrategy strategy;

    public void <init>(net.sourceforge.plantuml.command.regex.IRegex, net.sourceforge.plantuml.command.MultilinesStrategy)
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;
        net.sourceforge.plantuml.command.regex.IRegex r1;
        java.lang.String $r2, $r6, $r8, $r9;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        net.sourceforge.plantuml.command.MultilinesStrategy r10;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        r1 := @parameter0: net.sourceforge.plantuml.command.regex.IRegex;

        r10 := @parameter1: net.sourceforge.plantuml.command.MultilinesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        if $z0 == 0 goto label1;

        $r9 = interfaceinvoke r1.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("$");

        if $z1 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pattern ");

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.MultilinesStrategy strategy> = r10;

        r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.regex.IRegex starting> = r1;

        return;
    }

    public boolean syntaxWithFinalBracket()
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        return 0;
    }

    public abstract java.lang.String getPatternEnd();

    public java.lang.String[] getDescription()
    {
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1, $r2, $r6, $r8, $r9, $r11;
        net.sourceforge.plantuml.command.CommandMultilines2 r3;
        net.sourceforge.plantuml.command.regex.IRegex $r4;
        java.lang.String $r5, $r7, $r10, $r12;

        r3 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        $r0 = newarray (java.lang.String)[2];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("START: ");

        $r4 = r3.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.regex.IRegex starting>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[0] = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("END: ");

        $r10 = virtualinvoke r3.<net.sourceforge.plantuml.command.CommandMultilines2: java.lang.String getPatternEnd()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[1] = $r12;

        return $r0;
    }

    public final net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;
        net.sourceforge.plantuml.command.MultilinesStrategy $r1;
        boolean $z0, $z1, z2, $z3, $z4;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        net.sourceforge.plantuml.StringLocated $r3, $r6, $r7, $r15, $r16, $r19, r32;
        int $i0, $i1;
        java.lang.String $r4, $r8, $r17, $r20, r31;
        net.sourceforge.plantuml.command.regex.Pattern2 $r5;
        net.sourceforge.plantuml.command.regex.Matcher2 r9;
        net.sourceforge.plantuml.command.CommandControl $r10, $r11, $r12, $r13, $r14, $r24, $r25, $r26, $r27, $r28;
        java.lang.StringBuilder $r18, $r21, $r22;
        net.sourceforge.plantuml.command.BlocLines $r23, r29, r30;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        r29 := @parameter0: net.sourceforge.plantuml.command.BlocLines;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.MultilinesStrategy strategy>;

        r30 = virtualinvoke r29.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines cleanList(net.sourceforge.plantuml.command.MultilinesStrategy)>($r1);

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: boolean isCommandForbidden()>();

        if $z0 == 0 goto label1;

        $r28 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r28;

     label1:
        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: boolean syntaxWithFinalBracket()>();

        if $z1 == 0 goto label4;

        $i1 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i1 != 1 goto label3;

        $r15 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z4 = virtualinvoke $r17.<java.lang.String: boolean endsWith(java.lang.String)>("{");

        if $z4 != 0 goto label3;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getAt(int)>(0);

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        r31 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines singleString(java.lang.String)>(r31);

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)>($r23);

        $r25 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        if $r24 != $r25 goto label2;

        $r27 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r27;

     label2:
        $r26 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r26;

     label3:
        r30 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines eventuallyMoveBracket()>();

     label4:
        r32 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        if r32 != null goto label5;

        $r14 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r14;

     label5:
        $r2 = r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.regex.IRegex starting>;

        $r3 = virtualinvoke r32.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        z2 = interfaceinvoke $r2.<net.sourceforge.plantuml.command.regex.IRegex: boolean match(net.sourceforge.plantuml.StringLocated)>($r3);

        if z2 != 0 goto label6;

        $r13 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r13;

     label6:
        $i0 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 != 1 goto label7;

        $r12 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r12;

     label7:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: java.lang.String getPatternEnd()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>($r4);

        $r6 = virtualinvoke r30.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getLast()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r9 = virtualinvoke $r5.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>($r8);

        $z3 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.Matcher2: boolean matches()>();

        if $z3 != 0 goto label8;

        $r11 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r11;

     label8:
        virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: void actionIfCommandValid()>();

        $r10 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK>;

        return $r10;
    }

    public final net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;
        net.sourceforge.plantuml.command.MultilinesStrategy $r1;
        boolean $z0;
        net.sourceforge.plantuml.core.Diagram r2;
        net.sourceforge.plantuml.command.CommandExecutionResult $r3, $r6;
        net.sourceforge.plantuml.ugraphic.color.NoSuchColorException $r4;
        net.sourceforge.plantuml.command.BlocLines r7, r8;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        r2 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r7 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.MultilinesStrategy strategy>;

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines cleanList(net.sourceforge.plantuml.command.MultilinesStrategy)>($r1);

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: boolean syntaxWithFinalBracket()>();

        if $z0 == 0 goto label1;

        r8 = virtualinvoke r8.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines eventuallyMoveBracket()>();

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.command.BlocLines)>(r2, r8);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r6 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult badColor()>();

        return $r6;

        catch net.sourceforge.plantuml.ugraphic.color.NoSuchColorException from label1 to label2 with label3;
    }

    protected abstract net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException;

    protected boolean isCommandForbidden()
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        return 0;
    }

    protected void actionIfCommandValid()
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        return;
    }

    protected final net.sourceforge.plantuml.command.regex.IRegex getStartingPattern()
    {
        net.sourceforge.plantuml.command.CommandMultilines2 r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines2;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilines2: net.sourceforge.plantuml.command.regex.IRegex starting>;

        return $r1;
    }
}
