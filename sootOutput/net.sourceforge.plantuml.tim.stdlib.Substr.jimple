public class net.sourceforge.plantuml.tim.stdlib.Substr extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.Substr r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Substr;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.Substr r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.Substr;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%substr", 3);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.Substr r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Substr;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 == 2 goto label1;

        if i0 != 3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1, $r4, $r6;
        net.sourceforge.plantuml.tim.expression.TValue $r2, $r5, $r7, $r8, $r15;
        java.lang.String r3, r14;
        int i0, $i1, $i2, i3, $i4;
        net.sourceforge.plantuml.tim.stdlib.Substr r9;
        net.sourceforge.plantuml.tim.TContext r10;
        net.sourceforge.plantuml.tim.TMemory r11;
        net.sourceforge.plantuml.LineLocation r12;
        java.util.Map r13;

        r9 := @this: net.sourceforge.plantuml.tim.stdlib.Substr;

        r10 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r11 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r12 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r13 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r5 = (net.sourceforge.plantuml.tim.expression.TValue) $r4;

        i0 = virtualinvoke $r5.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if i0 < $i1 goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("");

        return $r8;

     label1:
        r14 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(i0);

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i2 != 3 goto label2;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r7 = (net.sourceforge.plantuml.tim.expression.TValue) $r6;

        i3 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $i4 = virtualinvoke r14.<java.lang.String: int length()>();

        if i3 >= $i4 goto label2;

        r14 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

     label2:
        $r15 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r14);

        return $r15;
    }
}
