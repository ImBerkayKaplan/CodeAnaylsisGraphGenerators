public class net.sourceforge.plantuml.code.Tokens extends java.lang.Object
{
    private final java.util.List keywords;

    public static void main(java.lang.String[])
    {
        java.lang.StringBuilder $r0, $r2, $r5;
        java.io.PrintStream $r1, $r14;
        net.sourceforge.plantuml.code.Tokens $r3, $r8;
        java.util.List $r4, $r9;
        int $i0;
        java.lang.String $r6, r13;
        java.util.TreeSet $r7;
        java.util.Iterator r11;
        boolean $z0;
        java.lang.Object $r12;
        java.lang.String[] r15;

        r15 := @parameter0: java.lang.String[];

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keywords=");

        $r3 = new net.sourceforge.plantuml.code.Tokens;

        specialinvoke $r3.<net.sourceforge.plantuml.code.Tokens: void <init>()>();

        $r4 = $r3.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = new java.util.TreeSet;

        $r8 = new net.sourceforge.plantuml.code.Tokens;

        specialinvoke $r8.<net.sourceforge.plantuml.code.Tokens: void <init>()>();

        $r9 = $r8.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        specialinvoke $r7.<java.util.TreeSet: void <init>(java.util.Collection)>($r9);

        r11 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(r13);

        goto label1;

     label2:
        return;
    }

    public java.lang.String compressUnicodeE000(java.lang.String)
    {
        net.sourceforge.plantuml.code.Tokens r0;
        java.util.List $r1, $r2;
        int $i0, $i1, i3;
        char c2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.CharSequence $r5;
        java.lang.String $r8, r9;

        r0 := @this: net.sourceforge.plantuml.code.Tokens;

        r9 := @parameter0: java.lang.String;

        i3 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label2;

        $i1 = 57344 + i3;

        c2 = (char) $i1;

        $r2 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (java.lang.CharSequence) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r5, $r8);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r9;
    }

    public java.lang.String compressAscii128(java.lang.String)
    {
        net.sourceforge.plantuml.code.Tokens r0;
        java.util.List $r1, $r2;
        int $i0, $i1, i3;
        char c2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.CharSequence $r5;
        java.lang.String $r8, r9;

        r0 := @this: net.sourceforge.plantuml.code.Tokens;

        r9 := @parameter0: java.lang.String;

        i3 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label2;

        $i1 = 128 + i3;

        c2 = (char) $i1;

        $r2 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (java.lang.CharSequence) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r5, $r8);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r9;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.code.Tokens r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.code.Tokens;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords> = $r1;

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("actor");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("participant");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("usecase");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("class");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("interface");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("abstract");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("enum");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("component");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("state");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("object");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("artifact");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("folder");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("rectangle");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("node");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("frame");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("cloud");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("database");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("storage");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("agent");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("stack");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("boundary");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("control");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("entity");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("card");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("file");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("package");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("queue");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("archimate");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("diamond");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("detach");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("@start");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("@end");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("also");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("autonumber");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("caption");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("title");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("newpage");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("loop");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("break");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("critical");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("note");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("legend");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("group");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("left");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("right");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("link");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("over");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("activate");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("deactivate");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("destroy");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("create");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("footbox");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("hide");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("show");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("skinparam");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("skin");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("bottom");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("namespace");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("page");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("down");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("else");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("endif");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("partition");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("footer");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("header");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("center");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("rotate");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("return");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("repeat");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("start");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("stop");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("while");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("endwhile");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("fork");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("again");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("kill");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("order");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("mainframe");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("across");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("stereotype");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("split");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("style");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("sprite");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("exit");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("include");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("pragma");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("undef");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("ifdef");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("ifndef");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("function");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("procedure");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("endfunction");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("endprocedure");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("unquoted");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("startsub");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("endsub");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("assert");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("local");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("!definelong");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("!enddefinelong");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("!define");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("define");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("alias");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("shape");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("label");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("BackgroundColor");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("Color");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("color");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("Entity");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("ENTITY");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("COLOR");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("LARGE");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("stereo");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("AZURE");

        specialinvoke r0.<net.sourceforge.plantuml.code.Tokens: void add(java.lang.String)>("Azure");

        return;
    }

    private void add(java.lang.String)
    {
        net.sourceforge.plantuml.code.Tokens r0;
        java.lang.String r1;
        java.util.List $r2, $r3, $r4;
        boolean $z0, $z1;
        int $i0, $i1;
        java.io.PrintStream $r5, $r7, $r9, $r11;
        java.lang.IllegalArgumentException $r6, $r8, $r10, $r12;

        r0 := @this: net.sourceforge.plantuml.code.Tokens;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r12;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 3 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r10;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("[!@]?[A-Za-z]+");

        if $z1 != 0 goto label3;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r8;

     label3:
        $r3 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.code.Tokens: java.util.List keywords>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 <= 127 goto label4;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label4:
        return;
    }
}
