public class net.sourceforge.plantuml.elk.proxy.graph.ElkNode extends net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty
{

    public void <init>(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0;
        java.lang.Object r1;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: void <init>(java.lang.Object)>(r1);

        return;
    }

    public net.sourceforge.plantuml.elk.proxy.graph.ElkNode getParent()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0, $r3;
        java.lang.Object $r1, r2;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getParent");

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        specialinvoke $r3.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void <init>(java.lang.Object)>(r2);

        return $r3;
    }

    public double getX()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getX");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getY()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getY");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public java.util.Collection getLabels()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r2;
        java.lang.Object $r3, $r4, r7;
        java.util.Collection r5;
        java.util.Iterator r6;
        boolean $z0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel $r8;

        r2 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        $r4 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r3, "getLabels");

        r5 = (java.util.Collection) $r4;

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = new net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        specialinvoke $r8.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void <init>(java.lang.Object)>(r7);

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getWidth");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getHeight");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public void setDimensions(double, double)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0;
        double d0, d1;
        java.lang.Object $r1;
        java.lang.Double $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.lang.Object obj>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call2(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r1, "setDimensions", $r2, $r3);

        return;
    }
}
