abstract class net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract extends java.lang.Object implements net.sourceforge.plantuml.xmi.IXmiClassDiagram
{
    protected final net.sourceforge.plantuml.classdiagram.ClassDiagram classDiagram;
    protected final org.w3c.dom.Document document;
    protected org.w3c.dom.Element ownedElement;
    protected final java.util.Set done;

    public void <init>(net.sourceforge.plantuml.classdiagram.ClassDiagram) throws javax.xml.parsers.ParserConfigurationException
    {
        net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract r0;
        java.util.HashSet $r1;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r2;
        javax.xml.parsers.DocumentBuilder r3;
        org.w3c.dom.Document $r4, $r5, $r6, $r7, $r9, $r11, $r14, $r17, $r20, $r24;
        org.w3c.dom.Element r8, r12, r15, r18, r21, $r25, $r26;
        java.lang.String $r22;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract;

        r2 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: java.util.Set done> = $r1;

        r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: net.sourceforge.plantuml.classdiagram.ClassDiagram classDiagram> = r2;

        r3 = staticinvoke <net.sourceforge.plantuml.xml.XmlFactories: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r4 = virtualinvoke r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document> = $r4;

        $r5 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        interfaceinvoke $r5.<org.w3c.dom.Document: void setXmlVersion(java.lang.String)>("1.0");

        $r6 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        interfaceinvoke $r6.<org.w3c.dom.Document: void setXmlStandalone(boolean)>(1);

        $r7 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r8 = interfaceinvoke $r7.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI");

        interfaceinvoke r8.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.version", "1.1");

        interfaceinvoke r8.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmlns:UML", "href://org.omg/UML/1.3");

        $r9 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r8);

        $r11 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r12 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI.header");

        interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r12);

        $r14 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r15 = interfaceinvoke $r14.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI.metamodel");

        interfaceinvoke r15.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.name", "UML");

        interfaceinvoke r15.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.version", "1.3");

        interfaceinvoke r12.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r15);

        $r17 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r18 = interfaceinvoke $r17.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI.content");

        interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r18);

        $r20 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r21 = interfaceinvoke $r20.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Model");

        $r22 = staticinvoke <net.sourceforge.plantuml.xmi.CucaDiagramXmiMaker: java.lang.String getModel(net.sourceforge.plantuml.UmlDiagram)>(r2);

        interfaceinvoke r21.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r22);

        interfaceinvoke r21.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", "PlantUML");

        interfaceinvoke r18.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r21);

        $r24 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        $r25 = interfaceinvoke $r24.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Namespace.ownedElement");

        r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Element ownedElement> = $r25;

        $r26 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Element ownedElement>;

        interfaceinvoke r21.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r26);

        return;
    }

    protected final java.lang.String forXMI(java.lang.String)
    {
        java.lang.String r0, $r1;
        net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract r2;

        r2 := @this: net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(58, 32);

        return $r1;
    }

    protected final java.lang.String forXMI(net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.cucadiagram.Display r0;
        boolean $z0;
        java.lang.CharSequence $r1;
        java.lang.String $r2, $r3;
        net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract r4;

        r4 := @this: net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        $z0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: boolean isNull(net.sourceforge.plantuml.cucadiagram.Display)>(r0);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(58, 32);

        return $r3;
    }

    public final void transformerXml(java.io.OutputStream) throws javax.xml.transform.TransformerException, javax.xml.parsers.ParserConfigurationException
    {
        javax.xml.transform.dom.DOMSource $r0;
        net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract r1;
        org.w3c.dom.Document $r2;
        javax.xml.transform.stream.StreamResult $r4;
        java.io.OutputStream r5;
        javax.xml.transform.Transformer r7;
        java.nio.charset.Charset $r8;
        java.lang.String $r9;

        r1 := @this: net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract;

        r5 := @parameter0: java.io.OutputStream;

        $r0 = new javax.xml.transform.dom.DOMSource;

        $r2 = r1.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r2);

        $r4 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r4.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(r5);

        r7 = staticinvoke <net.sourceforge.plantuml.xml.XmlFactories: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke r7.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r7.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", $r9);

        virtualinvoke r7.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r0, $r4);

        return;
    }

    protected final org.w3c.dom.Element createEntityNode(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract r0;
        org.w3c.dom.Document $r1, $r20, $r29, $r37, $r41, $r50;
        org.w3c.dom.Element r2, r45, r48, r51, r57, r62;
        net.sourceforge.plantuml.cucadiagram.IEntity r3;
        net.sourceforge.plantuml.cucadiagram.LeafType $r4, $r5, $r14, $r15, r49;
        java.lang.String $r6, $r9, r12, $r24, $r25, $r27, $r33, $r34, $r36, $r44, r47;
        net.sourceforge.plantuml.cucadiagram.Display $r7, $r18, $r53;
        java.lang.CharSequence $r8, r55, r60;
        net.sourceforge.plantuml.cucadiagram.Ident $r10, $r11;
        int $i0, $i1, $i2;
        net.sourceforge.plantuml.cucadiagram.Stereotype r13;
        net.sourceforge.plantuml.cucadiagram.Bodier $r17, $r52;
        boolean $z0, $z1, $z2;
        java.lang.Object $r19, $r28, $r40;
        java.lang.StringBuilder $r21, $r22, $r23, $r30, $r31, $r32;
        java.util.List $r38;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r43;
        java.util.Iterator r46;
        java.util.ListIterator r54, r59;
        net.sourceforge.plantuml.cucadiagram.Member r56, r61;
        net.sourceforge.plantuml.skin.VisibilityModifier r58, r63;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract;

        r3 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r1 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Class");

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r5 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType NOTE>;

        if $r4 != $r5 goto label01;

        return null;

     label01:
        $r6 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getUid()>();

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r6);

        $r7 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        $r9 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r9);

        $r10 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Ident getIdent()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.cucadiagram.Ident: net.sourceforge.plantuml.cucadiagram.Ident parent()>();

        r12 = virtualinvoke $r11.<net.sourceforge.plantuml.cucadiagram.Ident: java.lang.String forXmi()>();

        $i0 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

        $r43 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: net.sourceforge.plantuml.classdiagram.ClassDiagram classDiagram>;

        $r44 = staticinvoke <net.sourceforge.plantuml.xmi.CucaDiagramXmiMaker: java.lang.String getModel(net.sourceforge.plantuml.UmlDiagram)>($r43);

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("namespace", $r44);

        goto label03;

     label02:
        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("namespace", r12);

     label03:
        r13 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if r13 == null goto label06;

        $r37 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r45 = interfaceinvoke $r37.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:ModelElement.stereotype");

        $r38 = virtualinvoke r13.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.util.List getMultipleLabels()>();

        r46 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r40 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.lang.String) $r40;

        $r41 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r48 = interfaceinvoke $r41.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Stereotype");

        interfaceinvoke r48.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", r47);

        interfaceinvoke r45.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r48);

        goto label04;

     label05:
        interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r45);

     label06:
        r49 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r14 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ABSTRACT_CLASS>;

        if r49 != $r14 goto label07;

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("isAbstract", "true");

        goto label08;

     label07:
        $r15 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

        if r49 != $r15 goto label08;

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("isInterface", "true");

     label08:
        $r50 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r51 = interfaceinvoke $r50.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Classifier.feature");

        interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r51);

        $r52 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r53 = interfaceinvoke $r52.<net.sourceforge.plantuml.cucadiagram.Bodier: net.sourceforge.plantuml.cucadiagram.Display getFieldsToDisplay()>();

        r54 = virtualinvoke $r53.<net.sourceforge.plantuml.cucadiagram.Display: java.util.ListIterator iterator()>();

     label09:
        $z2 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r28 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.lang.CharSequence) $r28;

        r56 = (net.sourceforge.plantuml.cucadiagram.Member) r55;

        $r29 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r57 = interfaceinvoke $r29.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Attribute");

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("att");

        $i2 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r57.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r33);

        $r34 = virtualinvoke r56.<net.sourceforge.plantuml.cucadiagram.Member: java.lang.String getDisplay(boolean)>(0);

        interfaceinvoke r57.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r34);

        r58 = virtualinvoke r56.<net.sourceforge.plantuml.cucadiagram.Member: net.sourceforge.plantuml.skin.VisibilityModifier getVisibilityModifier()>();

        if r58 == null goto label10;

        $r36 = virtualinvoke r58.<net.sourceforge.plantuml.skin.VisibilityModifier: java.lang.String getXmiVisibility()>();

        interfaceinvoke r57.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("visibility", $r36);

     label10:
        interfaceinvoke r51.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r57);

        goto label09;

     label11:
        $r17 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.cucadiagram.Bodier: net.sourceforge.plantuml.cucadiagram.Display getMethodsToDisplay()>();

        r59 = virtualinvoke $r18.<net.sourceforge.plantuml.cucadiagram.Display: java.util.ListIterator iterator()>();

     label12:
        $z0 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r19 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.lang.CharSequence) $r19;

        r61 = (net.sourceforge.plantuml.cucadiagram.Member) r60;

        $r20 = r0.<net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract: org.w3c.dom.Document document>;

        r62 = interfaceinvoke $r20.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Operation");

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("att");

        $i1 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r62.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r24);

        $r25 = virtualinvoke r61.<net.sourceforge.plantuml.cucadiagram.Member: java.lang.String getDisplay(boolean)>(0);

        interfaceinvoke r62.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r25);

        r63 = virtualinvoke r61.<net.sourceforge.plantuml.cucadiagram.Member: net.sourceforge.plantuml.skin.VisibilityModifier getVisibilityModifier()>();

        if r63 == null goto label13;

        $r27 = virtualinvoke r63.<net.sourceforge.plantuml.skin.VisibilityModifier: java.lang.String getXmiVisibility()>();

        interfaceinvoke r62.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("visibility", $r27);

     label13:
        interfaceinvoke r51.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r62);

        goto label12;

     label14:
        return r2;
    }
}
