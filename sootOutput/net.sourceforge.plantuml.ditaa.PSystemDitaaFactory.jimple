public class net.sourceforge.plantuml.ditaa.PSystemDitaaFactory extends net.sourceforge.plantuml.command.PSystemBasicFactory
{

    public void <init>(net.sourceforge.plantuml.core.DiagramType)
    {
        net.sourceforge.plantuml.ditaa.PSystemDitaaFactory r0;
        net.sourceforge.plantuml.core.DiagramType r1;

        r0 := @this: net.sourceforge.plantuml.ditaa.PSystemDitaaFactory;

        r1 := @parameter0: net.sourceforge.plantuml.core.DiagramType;

        specialinvoke r0.<net.sourceforge.plantuml.command.PSystemBasicFactory: void <init>(net.sourceforge.plantuml.core.DiagramType)>(r1);

        return;
    }

    public net.sourceforge.plantuml.ditaa.PSystemDitaa initDiagram(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, java.lang.String)
    {
        java.lang.String r0, $r6;
        net.sourceforge.plantuml.ditaa.PSystemDitaaFactory r1;
        float f0;
        net.sourceforge.plantuml.core.DiagramType $r2, $r3, $r5, $r10, $r11;
        java.lang.IllegalStateException $r4;
        net.sourceforge.plantuml.ditaa.PSystemDitaa $r7;
        net.sourceforge.plantuml.core.UmlSource r8;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        net.sourceforge.plantuml.api.ThemeStyle r9;

        r1 := @this: net.sourceforge.plantuml.ditaa.PSystemDitaaFactory;

        r9 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r8 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r0 := @parameter2: java.lang.String;

        z4 = 1;

        if r0 == null goto label2;

        $z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("-E");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("--no-separation");

        if $z3 == 0 goto label2;

     label1:
        z4 = 0;

     label2:
        z5 = 1;

        if r0 == null goto label4;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("-S");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("--no-shadows");

        if $z1 == 0 goto label4;

     label3:
        z5 = 0;

     label4:
        f0 = specialinvoke r1.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: float extractScale(java.lang.String)>(r0);

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: net.sourceforge.plantuml.core.DiagramType getDiagramType()>();

        $r11 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UML>;

        if $r10 != $r11 goto label5;

        return null;

     label5:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: net.sourceforge.plantuml.core.DiagramType getDiagramType()>();

        $r3 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DITAA>;

        if $r2 != $r3 goto label6;

        $r7 = new net.sourceforge.plantuml.ditaa.PSystemDitaa;

        specialinvoke $r7.<net.sourceforge.plantuml.ditaa.PSystemDitaa: void <init>(net.sourceforge.plantuml.core.UmlSource,java.lang.String,boolean,boolean,float)>(r8, "", z4, z5, f0);

        return $r7;

     label6:
        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: net.sourceforge.plantuml.core.DiagramType getDiagramType()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.core.DiagramType: java.lang.String name()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }

    public net.sourceforge.plantuml.ditaa.PSystemDitaa executeLine(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.ditaa.PSystemDitaa, java.lang.String)
    {
        net.sourceforge.plantuml.ditaa.PSystemDitaa r0, $r2, $r6;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, $z7;
        net.sourceforge.plantuml.ditaa.PSystemDitaaFactory r3;
        float f0;
        net.sourceforge.plantuml.core.UmlSource r4;
        net.sourceforge.plantuml.api.ThemeStyle r5;

        r3 := @this: net.sourceforge.plantuml.ditaa.PSystemDitaaFactory;

        r5 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r4 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r0 := @parameter2: net.sourceforge.plantuml.ditaa.PSystemDitaa;

        r1 := @parameter3: java.lang.String;

        if r0 != null goto label6;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ditaa");

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("ditaa(");

        if $z4 == 0 goto label6;

     label1:
        z5 = 1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("-E");

        if $z1 != 0 goto label2;

        $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("--no-separation");

        if $z3 == 0 goto label3;

     label2:
        z5 = 0;

     label3:
        z6 = 1;

        $z7 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("-S");

        if $z7 != 0 goto label4;

        $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("--no-shadows");

        if $z2 == 0 goto label5;

     label4:
        z6 = 0;

     label5:
        f0 = specialinvoke r3.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: float extractScale(java.lang.String)>(r1);

        $r6 = new net.sourceforge.plantuml.ditaa.PSystemDitaa;

        specialinvoke $r6.<net.sourceforge.plantuml.ditaa.PSystemDitaa: void <init>(net.sourceforge.plantuml.core.UmlSource,java.lang.String,boolean,boolean,float)>(r4, "", z5, z6, f0);

        return $r6;

     label6:
        if r0 != null goto label7;

        return null;

     label7:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.ditaa.PSystemDitaa: net.sourceforge.plantuml.ditaa.PSystemDitaa add(java.lang.String)>(r1);

        return $r2;
    }

    private float extractScale(java.lang.String)
    {
        java.lang.String r0, r3;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher r2;
        boolean $z0;
        float $f0;
        net.sourceforge.plantuml.ditaa.PSystemDitaaFactory r4;

        r4 := @this: net.sourceforge.plantuml.ditaa.PSystemDitaaFactory;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 1.0F;

     label1:
        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("scale=([\\d.]+)");

        r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r3);

        return $f0;

     label2:
        return 1.0F;
    }

    public volatile net.sourceforge.plantuml.AbstractPSystem initDiagram(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, java.lang.String)
    {
        net.sourceforge.plantuml.ditaa.PSystemDitaaFactory r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        java.lang.String r3;
        net.sourceforge.plantuml.ditaa.PSystemDitaa $r4;

        r0 := @this: net.sourceforge.plantuml.ditaa.PSystemDitaaFactory;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: net.sourceforge.plantuml.ditaa.PSystemDitaa initDiagram(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,java.lang.String)>(r1, r2, r3);

        return $r4;
    }

    public volatile net.sourceforge.plantuml.AbstractPSystem executeLine(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.AbstractPSystem, java.lang.String)
    {
        net.sourceforge.plantuml.ditaa.PSystemDitaaFactory r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        net.sourceforge.plantuml.AbstractPSystem r3;
        java.lang.String r4;
        net.sourceforge.plantuml.ditaa.PSystemDitaa $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.ditaa.PSystemDitaaFactory;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter2: net.sourceforge.plantuml.AbstractPSystem;

        r4 := @parameter3: java.lang.String;

        $r5 = (net.sourceforge.plantuml.ditaa.PSystemDitaa) r3;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.ditaa.PSystemDitaaFactory: net.sourceforge.plantuml.ditaa.PSystemDitaa executeLine(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.ditaa.PSystemDitaa,java.lang.String)>(r1, r2, $r5, r4);

        return $r6;
    }
}
