public class smetana.core.CString extends smetana.core.UnsupportedC implements smetana.core.__ptr__
{
    private static int UID;
    private final java.lang.Throwable creation;
    private final java.util.List data2;
    private final int currentStart;
    private final int uid;
    private h.ST_refstr_t parent;

    public boolean isSameThan(smetana.core.CString)
    {
        smetana.core.CString r0, r1;
        java.util.List $r2, $r3;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r4;
        boolean $z0;

        r0 := @this: smetana.core.CString;

        r1 := @parameter0: smetana.core.CString;

        $r3 = r0.<smetana.core.CString: java.util.List data2>;

        $r2 = r1.<smetana.core.CString: java.util.List data2>;

        if $r3 == $r2 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;

     label1:
        $i1 = r0.<smetana.core.CString: int currentStart>;

        $i0 = r1.<smetana.core.CString: int currentStart>;

        if $i1 != $i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void <init>(java.lang.String)
    {
        smetana.core.CString r0;
        java.lang.String r1;
        int $i0, i2;
        java.util.List $r2, $r4;
        java.lang.Character $r3, $r5;
        char $c1;

        r0 := @this: smetana.core.CString;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<smetana.core.CString: void <init>(java.util.List,int)>(null, 0);

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label2;

        $r4 = r0.<smetana.core.CString: java.util.List data2>;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<smetana.core.CString: java.util.List data2>;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public smetana.core.CString duplicate()
    {
        smetana.core.CString $r0, r2;
        java.util.ArrayList $r1;
        java.util.List $r3;
        int $i0;

        r2 := @this: smetana.core.CString;

        $r0 = new smetana.core.CString;

        $r1 = new java.util.ArrayList;

        $r3 = r2.<smetana.core.CString: java.util.List data2>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $i0 = r2.<smetana.core.CString: int currentStart>;

        specialinvoke $r0.<smetana.core.CString: void <init>(java.util.List,int)>($r1, $i0);

        return $r0;
    }

    public smetana.core.CString strdup()
    {
        smetana.core.CString r0, $r1;

        r0 := @this: smetana.core.CString;

        $r1 = virtualinvoke r0.<smetana.core.CString: smetana.core.CString duplicate()>();

        return $r1;
    }

    public static smetana.core.CString gmalloc(int)
    {
        smetana.core.CString $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new smetana.core.CString;

        specialinvoke $r0.<smetana.core.CString: void <init>(int)>(i0);

        return $r0;
    }

    public void <init>(int)
    {
        smetana.core.CString r0;
        int i0, i1;
        java.util.List $r1;
        java.lang.Character $r2;

        r0 := @this: smetana.core.CString;

        i0 := @parameter0: int;

        specialinvoke r0.<smetana.core.CString: void <init>(java.util.List,int)>(null, 0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<smetana.core.CString: java.util.List data2>;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void <init>(java.util.List, int)
    {
        smetana.core.CString r0;
        java.lang.Throwable $r1, $r3;
        java.util.List r2;
        int i0, $i1, $i2, $i3;
        java.util.ArrayList $r5;

        r0 := @this: smetana.core.CString;

        r2 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        specialinvoke r0.<smetana.core.UnsupportedC: void <init>()>();

        $r1 = new java.lang.Throwable;

        specialinvoke $r1.<java.lang.Throwable: void <init>()>();

        r0.<smetana.core.CString: java.lang.Throwable creation> = $r1;

        if r2 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<smetana.core.CString: java.util.List data2> = $r5;

        goto label2;

     label1:
        r0.<smetana.core.CString: java.util.List data2> = r2;

     label2:
        r0.<smetana.core.CString: int currentStart> = i0;

        $i1 = <smetana.core.CString: int UID>;

        r0.<smetana.core.CString: int uid> = $i1;

        $i2 = <smetana.core.CString: int UID>;

        $i3 = $i2 + 2;

        <smetana.core.CString: int UID> = $i3;

        $r3 = r0.<smetana.core.CString: java.lang.Throwable creation>;

        virtualinvoke $r3.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    public smetana.core.__ptr__ getTheField(smetana.core.OFFSET)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r5, $r6, $r8;
        smetana.core.OFFSET r2;
        java.lang.String $r4, $r9;
        smetana.core.CString r7;
        java.lang.UnsupportedOperationException $r10;

        r7 := @this: smetana.core.CString;

        r2 := @parameter0: smetana.core.OFFSET;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CString::addVirtualBytes ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <smetana.core.JUtils: void LOG(java.lang.String)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AM ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <smetana.core.JUtils: void LOG(java.lang.String)>($r9);

        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r10;
    }

    public h.ST_refstr_t getParent()
    {
        smetana.core.CString r0;
        h.ST_refstr_t $r1, $r3;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: smetana.core.CString;

        $r1 = r0.<smetana.core.CString: h.ST_refstr_t parent>;

        if $r1 == null goto label1;

        $r3 = r0.<smetana.core.CString: h.ST_refstr_t parent>;

        return $r3;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setParent(h.ST_refstr_t)
    {
        h.ST_refstr_t r0;
        smetana.core.CString r1;
        java.lang.IllegalStateException $r2;

        r1 := @this: smetana.core.CString;

        r0 := @parameter0: h.ST_refstr_t;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        r1.<smetana.core.CString: h.ST_refstr_t parent> = r0;

        return;
    }

    public smetana.core.CString plus_(int)
    {
        smetana.core.CString $r0, r1;
        int i0, $i1, $i2;
        java.util.List $r2;

        r1 := @this: smetana.core.CString;

        i0 := @parameter0: int;

        $r0 = new smetana.core.CString;

        $r2 = r1.<smetana.core.CString: java.util.List data2>;

        $i1 = r1.<smetana.core.CString: int currentStart>;

        $i2 = $i1 + i0;

        specialinvoke $r0.<smetana.core.CString: void <init>(java.util.List,int)>($r2, $i2);

        return $r0;
    }

    public int comparePointer(smetana.core.__ptr__)
    {
        smetana.core.__ptr__ r0;
        smetana.core.CString r1, r2;
        java.util.List $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r5;

        r2 := @this: smetana.core.CString;

        r0 := @parameter0: smetana.core.__ptr__;

        r1 = (smetana.core.CString) r0;

        $r4 = r2.<smetana.core.CString: java.util.List data2>;

        $r3 = r1.<smetana.core.CString: java.util.List data2>;

        if $r4 == $r3 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $i1 = r2.<smetana.core.CString: int currentStart>;

        $i0 = r1.<smetana.core.CString: int currentStart>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r5, $r6, $r7;
        smetana.core.CString r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.String $r8;
        java.lang.Object $r9;
        java.lang.Character r10;
        char $c0;

        r2 := @this: smetana.core.CString;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r2.<smetana.core.CString: java.util.List getData()>();

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.Character) $r9;

        $c0 = virtualinvoke r10.<java.lang.Character: char charValue()>();

        if $c0 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(0)");

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

     label3:
        goto label1;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CString:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private java.util.List getData()
    {
        smetana.core.CString r0;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1;

        r0 := @this: smetana.core.CString;

        $r2 = r0.<smetana.core.CString: java.util.List data2>;

        $i0 = r0.<smetana.core.CString: int currentStart>;

        $r1 = r0.<smetana.core.CString: java.util.List data2>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        return $r3;
    }

    public java.lang.String getContent()
    {
        java.lang.StringBuilder $r0;
        smetana.core.CString r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.UnsupportedOperationException $r5;
        java.lang.Object $r6;
        java.lang.Character r7;
        char $c0;
        java.lang.String $r9;

        r2 := @this: smetana.core.CString;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r2.<smetana.core.CString: java.util.List getData()>();

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Character) $r6;

        $c0 = virtualinvoke r7.<java.lang.Character: char charValue()>();

        if $c0 != 0 goto label2;

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        goto label1;

     label3:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public char charAt(int)
    {
        int i0, $i1, $i2, $i3;
        smetana.core.CString r0;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        java.lang.Character $r4;
        char $c4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: smetana.core.CString;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<smetana.core.CString: java.util.List getData()>();

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<smetana.core.CString: java.util.List data2>;

        $i2 = r0.<smetana.core.CString: int currentStart>;

        $i3 = $i2 + i0;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i3);

        $r4 = (java.lang.Character) $r3;

        $c4 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        return $c4;
    }

    public char setCharAt(int, char)
    {
        smetana.core.CString r0;
        java.util.List $r1;
        int i0;
        char c1;
        java.lang.Character $r2;

        r0 := @this: smetana.core.CString;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $r1 = specialinvoke r0.<smetana.core.CString: java.util.List getData()>();

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        return c1;
    }

    public int length()
    {
        smetana.core.CString r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.Object $r4;
        java.lang.Character r5;
        char $c0;
        int i1;

        r0 := @this: smetana.core.CString;

        i1 = 0;

        $r1 = specialinvoke r0.<smetana.core.CString: java.util.List getData()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Character) $r4;

        $c0 = virtualinvoke r5.<java.lang.Character: char charValue()>();

        if $c0 != 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    public int strcmp(smetana.core.CString)
    {
        smetana.core.CString r0, r3;
        java.util.List $r1;
        int $i0, $i1, $i2, i5, i7;
        java.lang.IllegalStateException $r2;
        char $c3, $c4, $c6;

        r0 := @this: smetana.core.CString;

        r3 := @parameter0: smetana.core.CString;

        i7 = 0;

     label1:
        $r1 = r0.<smetana.core.CString: java.util.List data2>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = r0.<smetana.core.CString: int currentStart>;

        $i2 = $i0 - $i1;

        if i7 >= $i2 goto label4;

        $c3 = virtualinvoke r0.<smetana.core.CString: char charAt(int)>(i7);

        $c4 = virtualinvoke r3.<smetana.core.CString: char charAt(int)>(i7);

        i5 = $c3 - $c4;

        $c6 = virtualinvoke r0.<smetana.core.CString: char charAt(int)>(i7);

        if $c6 == 0 goto label2;

        if i5 == 0 goto label3;

     label2:
        return i5;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public int strcmp(smetana.core.CString, int)
    {
        smetana.core.CString r0, r2;
        java.util.List $r1;
        int $i0, $i1, $i2, i3, i6, i8;
        char $c4, $c5, $c7;

        r0 := @this: smetana.core.CString;

        r2 := @parameter0: smetana.core.CString;

        i3 := @parameter1: int;

        i8 = 0;

     label1:
        $r1 = r0.<smetana.core.CString: java.util.List data2>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = r0.<smetana.core.CString: int currentStart>;

        $i2 = $i0 - $i1;

        if i8 >= $i2 goto label4;

        if i8 >= i3 goto label4;

        $c4 = virtualinvoke r0.<smetana.core.CString: char charAt(int)>(i8);

        $c5 = virtualinvoke r2.<smetana.core.CString: char charAt(int)>(i8);

        i6 = $c4 - $c5;

        $c7 = virtualinvoke r0.<smetana.core.CString: char charAt(int)>(i8);

        if $c7 == 0 goto label2;

        if i6 == 0 goto label3;

     label2:
        return i6;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return 0;
    }

    public void copyFrom(smetana.core.CString, int)
    {
        smetana.core.CString r0, r1;
        int $i0, $i1, i2, i5;
        char $c3;

        r1 := @this: smetana.core.CString;

        r0 := @parameter0: smetana.core.CString;

        i2 := @parameter1: int;

        i5 = 0;

     label1:
        $i0 = virtualinvoke r0.<smetana.core.CString: int length()>();

        $i1 = $i0 + 1;

        if i5 >= $i1 goto label2;

        if i5 >= i2 goto label2;

        $c3 = virtualinvoke r0.<smetana.core.CString: char charAt(int)>(i5);

        virtualinvoke r1.<smetana.core.CString: char setCharAt(int,char)>(i5, $c3);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public smetana.core.CString strchr(char)
    {
        smetana.core.CString r0, $r5;
        java.util.List $r1, $r2, $r6;
        int $i0, i3;
        java.lang.Object $r3;
        java.lang.Character $r4;
        char $c1, c2;

        r0 := @this: smetana.core.CString;

        c2 := @parameter0: char;

        i3 = r0.<smetana.core.CString: int currentStart>;

     label1:
        $r1 = r0.<smetana.core.CString: java.util.List data2>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label3;

        $r2 = r0.<smetana.core.CString: java.util.List data2>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = (java.lang.Character) $r3;

        $c1 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        if $c1 != c2 goto label2;

        $r5 = new smetana.core.CString;

        $r6 = r0.<smetana.core.CString: java.util.List data2>;

        specialinvoke $r5.<smetana.core.CString: void <init>(java.util.List,int)>($r6, i3);

        return $r5;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return null;
    }

    public boolean isSame(smetana.core.CString)
    {
        smetana.core.CString r0, r2;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: smetana.core.CString;

        r2 := @parameter0: smetana.core.CString;

        $r1 = virtualinvoke r0.<smetana.core.CString: java.lang.String getContent()>();

        $r3 = virtualinvoke r2.<smetana.core.CString: java.lang.String getContent()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public int getUid()
    {
        smetana.core.CString r0;
        int $i0;

        r0 := @this: smetana.core.CString;

        $i0 = r0.<smetana.core.CString: int uid>;

        return $i0;
    }

    public volatile java.lang.Object getTheField(smetana.core.OFFSET)
    {
        smetana.core.CString r0;
        smetana.core.OFFSET r1;
        smetana.core.__ptr__ $r2;

        r0 := @this: smetana.core.CString;

        r1 := @parameter0: smetana.core.OFFSET;

        $r2 = virtualinvoke r0.<smetana.core.CString: smetana.core.__ptr__ getTheField(smetana.core.OFFSET)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        <smetana.core.CString: int UID> = 100;

        return;
    }
}
