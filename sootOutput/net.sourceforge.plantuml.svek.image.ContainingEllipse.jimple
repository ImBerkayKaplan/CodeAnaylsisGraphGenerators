public class net.sourceforge.plantuml.svek.image.ContainingEllipse extends java.lang.Object
{
    private final net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle sec;
    private final net.sourceforge.plantuml.svek.image.YTransformer ytransformer;
    private double deltaShadow;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        net.sourceforge.plantuml.svek.image.ContainingEllipse r2;
        double $d0, $d1;
        java.lang.String $r6;

        r2 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ContainingEllipse ");

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.ContainingEllipse: double getWidth()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.ContainingEllipse: double getHeight()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void <init>(double)
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle $r1;
        net.sourceforge.plantuml.svek.image.YTransformer $r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle;

        specialinvoke $r1.<net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle sec> = $r1;

        $r2 = new net.sourceforge.plantuml.svek.image.YTransformer;

        specialinvoke $r2.<net.sourceforge.plantuml.svek.image.YTransformer: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.YTransformer ytransformer> = $r2;

        return;
    }

    public void append(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        net.sourceforge.plantuml.svek.image.YTransformer $r1;
        net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle $r2;
        java.awt.geom.Point2D r3, r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        r3 := @parameter0: java.awt.geom.Point2D;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.YTransformer ytransformer>;

        r4 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.image.YTransformer: java.awt.geom.Point2D getReversePoint2D(java.awt.geom.Point2D)>(r3);

        $r2 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle sec>;

        virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle: void append(java.awt.geom.Point2D)>(r4);

        return;
    }

    public void append(double, double)
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        java.awt.geom.Point2D$Double $r1;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d1);

        virtualinvoke r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: void append(java.awt.geom.Point2D)>($r1);

        return;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle $r1;
        net.sourceforge.plantuml.svek.image.Circle $r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle sec>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle: net.sourceforge.plantuml.svek.image.Circle getCircle()>();

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.Circle: double getRadius()>();

        $d1 = 2.0 * $d0;

        return $d1;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle $r1;
        net.sourceforge.plantuml.svek.image.Circle $r2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.svek.image.YTransformer $r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle sec>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle: net.sourceforge.plantuml.svek.image.Circle getCircle()>();

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.Circle: double getRadius()>();

        $d1 = 2.0 * $d0;

        $r3 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.YTransformer ytransformer>;

        $d2 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.image.YTransformer: double getAlpha()>();

        $d3 = $d1 * $d2;

        return $d3;
    }

    public java.awt.geom.Point2D getCenter()
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle $r1;
        net.sourceforge.plantuml.svek.image.YTransformer $r2;
        net.sourceforge.plantuml.svek.image.Circle $r3;
        java.awt.geom.Point2D $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.YTransformer ytransformer>;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle sec>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle: net.sourceforge.plantuml.svek.image.Circle getCircle()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.image.Circle: java.awt.geom.Point2D getCenter()>();

        $r5 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.YTransformer: java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D)>($r4);

        return $r5;
    }

    public net.sourceforge.plantuml.ugraphic.UEllipse asUEllipse()
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0;
        net.sourceforge.plantuml.svek.image.ContainingEllipse r1;
        double $d0, $d1, $d2;

        r1 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.ContainingEllipse: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.ContainingEllipse: double getHeight()>();

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d0, $d1);

        $d2 = r1.<net.sourceforge.plantuml.svek.image.ContainingEllipse: double deltaShadow>;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d2);

        return $r0;
    }

    public void setDeltaShadow(double)
    {
        net.sourceforge.plantuml.svek.image.ContainingEllipse r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.ContainingEllipse;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.svek.image.ContainingEllipse: double deltaShadow> = d0;

        return;
    }
}
