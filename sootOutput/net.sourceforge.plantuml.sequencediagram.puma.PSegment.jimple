public class net.sourceforge.plantuml.sequencediagram.puma.PSegment extends java.lang.Object
{
    private final double minsize;
    private double startx;
    private double endx;

    public void <init>(double)
    {
        net.sourceforge.plantuml.sequencediagram.puma.PSegment r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double minsize> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double startx> = 0.0;

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double endx> = d0;

        return;
    }

    public double getMinsize()
    {
        net.sourceforge.plantuml.sequencediagram.puma.PSegment r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double minsize>;

        return $d0;
    }

    public void push(double)
    {
        net.sourceforge.plantuml.sequencediagram.puma.PSegment r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double startx>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double startx> = $d2;

        $d3 = r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double endx>;

        $d4 = $d3 + d0;

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double endx> = $d4;

        return;
    }

    public java.lang.String getDebugPosition()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.puma.PSegment r2;
        double $d0, $d1;
        int $i0, $i1;
        java.lang.String $r6;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = r2.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double startx>;

        $i0 = (int) $d0;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $d1 = r2.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double endx>;

        $i1 = (int) $d1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public double getPosition(double)
    {
        double d0, $d1, $d2;
        byte $b0, $b1;
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.sequencediagram.puma.PSegment r1;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d2 = r1.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double startx>;

        return $d2;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        $d1 = r1.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: double endx>;

        return $d1;

     label2:
        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
