public class net.sourceforge.plantuml.tim.EaterForeach extends net.sourceforge.plantuml.tim.Eater
{
    private java.lang.String varname;
    private net.sourceforge.plantuml.json.JsonArray jsonArray;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterForeach r0;
        net.sourceforge.plantuml.StringLocated r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterForeach;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterForeach r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.tim.expression.TValue r4;
        net.sourceforge.plantuml.json.JsonValue $r5;
        net.sourceforge.plantuml.json.JsonArray $r6;

        r0 := @this: net.sourceforge.plantuml.tim.EaterForeach;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: void checkAndEatChar(java.lang.String)>("!foreach");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: void skipSpaces()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: java.lang.String eatAndGetVarname()>();

        r0.<net.sourceforge.plantuml.tim.EaterForeach: java.lang.String varname> = $r1;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: void checkAndEatChar(java.lang.String)>("in");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: void skipSpaces()>();

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterForeach: net.sourceforge.plantuml.tim.expression.TValue eatExpression(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r2, r3);

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $r6 = (net.sourceforge.plantuml.json.JsonArray) $r5;

        r0.<net.sourceforge.plantuml.tim.EaterForeach: net.sourceforge.plantuml.json.JsonArray jsonArray> = $r6;

        return;
    }

    public boolean isSkip()
    {
        net.sourceforge.plantuml.tim.EaterForeach r0;
        net.sourceforge.plantuml.json.JsonArray $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.EaterForeach;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterForeach: net.sourceforge.plantuml.json.JsonArray jsonArray>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.tim.EaterForeach: net.sourceforge.plantuml.json.JsonArray jsonArray>;

        $i0 = virtualinvoke $r2.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public final java.lang.String getVarname()
    {
        net.sourceforge.plantuml.tim.EaterForeach r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterForeach;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterForeach: java.lang.String varname>;

        return $r1;
    }

    public final net.sourceforge.plantuml.json.JsonArray getJsonArray()
    {
        net.sourceforge.plantuml.tim.EaterForeach r0;
        net.sourceforge.plantuml.json.JsonArray $r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterForeach;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterForeach: net.sourceforge.plantuml.json.JsonArray jsonArray>;

        return $r1;
    }
}
