public class net.sourceforge.plantuml.sequencediagram.GroupingStart extends net.sourceforge.plantuml.sequencediagram.Grouping
{
    private final java.util.List children;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral;
    private final net.sourceforge.plantuml.sequencediagram.GroupingStart parent;
    private boolean parallel;

    public void <init>(java.lang.String, java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.sequencediagram.GroupingStart, net.sourceforge.plantuml.style.StyleBuilder)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0, r8;
        java.lang.String r1, r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r7;
        net.sourceforge.plantuml.style.StyleBuilder r4;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r5;
        java.util.ArrayList $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r3 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        r8 := @parameter4: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r4 := @parameter5: net.sourceforge.plantuml.style.StyleBuilder;

        $r5 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: void <init>(java.lang.String,java.lang.String,net.sourceforge.plantuml.sequencediagram.GroupingType,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.style.StyleBuilder)>(r1, r2, $r5, r3, r4);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.util.List children> = $r6;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: boolean parallel> = 0;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral> = r7;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.sequencediagram.GroupingStart parent> = r8;

        return;
    }

    public net.sourceforge.plantuml.style.Style[] getUsedStyles()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        net.sourceforge.plantuml.style.Style[] r1;
        net.sourceforge.plantuml.style.Style $r2, $r5, $r6;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3;
        net.sourceforge.plantuml.style.PName $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r2 = r1[0];

        if $r2 == null goto label1;

        $r5 = r1[0];

        $r4 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r4, $r3);

        r1[0] = $r6;

     label1:
        return r1;
    }

    java.util.List getChildren()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.util.List children>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addChildren(net.sourceforge.plantuml.sequencediagram.GroupingLeaf)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public int getLevel()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0, $r1, $r2;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.sequencediagram.GroupingStart parent>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.sequencediagram.GroupingStart parent>;

        $i0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.GroupingStart: int getLevel()>();

        $i1 = $i0 + 1;

        return $i1;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral>;

        return $r1;
    }

    public boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        return 0;
    }

    public net.sourceforge.plantuml.Url getUrl()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        return null;
    }

    public boolean hasUrl()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        return 0;
    }

    public boolean isParallel()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: boolean parallel>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getTitle()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("par2");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void goParallel()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: boolean parallel> = 1;

        return;
    }
}
